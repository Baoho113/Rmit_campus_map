{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ga020\\\\OneDrive\\\\Desktop\\\\\\u3000\\u3000\\\\Building IT Systems\\\\frontend\\\\src\\\\MapComponent.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect } from \"react\";\n// import \"leaflet/dist/leaflet.css\";\n// import L from \"leaflet\";\n\n// function MapComponent() {\n//   useEffect(() => {\n//     const mapElement = document.getElementById(\"map\");\n//     if (mapElement && !mapElement._leaflet_id) {\n//       // Check if map is not already initialized\n//       const map = L.map(\"map\").setView([10.7298, 106.69451], 20); // RMIT Vietnam Ho Chi Minh Campus coordinates\n\n//       L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n//         attribution: \"© OpenStreetMap contributors\",\n//       }).addTo(map);\n//     }\n//   }, []);\n\n//   return <div id=\"map\" style={{ height: \"500px\" }}></div>;\n// }\n\n// export default MapComponent;\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport 'leaflet-draw';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapComponent() {\n  _s();\n  const mapRef = useRef(null); // useRef를 이용해 맵 레퍼런스 생성\n  const [drawnItems, setDrawnItems] = useState(null); // 도형 정보 상태\n\n  useEffect(() => {\n    if (!mapRef.current) {\n      const map = L.map('map').setView([10.7369, 106.6773], 13); // RMIT Vietnam Ho Chi Minh Campus coordinates\n\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap contributors'\n      }).addTo(map);\n      const drawnItems = new L.FeatureGroup(); // 그린 도형을 담을 FeatureGroup 생성\n      map.addLayer(drawnItems);\n      const drawControl = new L.Control.Draw({\n        edit: {\n          featureGroup: drawnItems\n        },\n        draw: {\n          polygon: true,\n          polyline: false,\n          circle: false,\n          marker: false,\n          circlemarker: false,\n          rectangle: true\n        }\n      });\n      map.addControl(drawControl);\n      mapRef.current = map; // 맵 레퍼런스에 할당\n    }\n    mapRef.current.on(L.Draw.Event.CREATED, event => {\n      const layer = event.layer;\n      mapRef.current.addLayer(layer);\n      setDrawnItems(mapRef.current.toGeoJSON()); // 그려진 도형을 GeoJSON 형식으로 상태에 저장\n    });\n  }, []);\n  const sendDataToServer = () => {\n    // drawnItems 상태에 저장된 도형 정보를 서버로 보냄 (Axios 또는 Fetch API 사용)\n    axios.post('/api/save-shape', {\n      shapeData: drawnItems\n    }).then(response => {\n      console.log(response.data.message);\n    }).catch(error => {\n      console.error('Error saving shape:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: '500px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendDataToServer,\n      children: \"Save Shape\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 7\n  }, this);\n}\n_s(MapComponent, \"v3EOS9RMAiuiTQpy4bypSyA7pOM=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","useRef","L","axios","jsxDEV","_jsxDEV","MapComponent","_s","mapRef","drawnItems","setDrawnItems","current","map","setView","tileLayer","attribution","addTo","FeatureGroup","addLayer","drawControl","Control","Draw","edit","featureGroup","draw","polygon","polyline","circle","marker","circlemarker","rectangle","addControl","on","Event","CREATED","event","layer","toGeoJSON","sendDataToServer","post","shapeData","then","response","console","log","data","message","catch","error","children","id","style","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ga020/OneDrive/Desktop/　　/Building IT Systems/frontend/src/MapComponent.js"],"sourcesContent":["// import React, { useEffect } from \"react\";\r\n// import \"leaflet/dist/leaflet.css\";\r\n// import L from \"leaflet\";\r\n\r\n// function MapComponent() {\r\n//   useEffect(() => {\r\n//     const mapElement = document.getElementById(\"map\");\r\n//     if (mapElement && !mapElement._leaflet_id) {\r\n//       // Check if map is not already initialized\r\n//       const map = L.map(\"map\").setView([10.7298, 106.69451], 20); // RMIT Vietnam Ho Chi Minh Campus coordinates\r\n\r\n//       L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n//         attribution: \"© OpenStreetMap contributors\",\r\n//       }).addTo(map);\r\n//     }\r\n//   }, []);\r\n\r\n//   return <div id=\"map\" style={{ height: \"500px\" }}></div>;\r\n// }\r\n\r\n// export default MapComponent;\r\n\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport 'leaflet-draw/dist/leaflet.draw.css';\r\nimport 'leaflet-draw';\r\nimport axios from 'axios';\r\n\r\nfunction MapComponent() {\r\n    const mapRef = useRef(null); // useRef를 이용해 맵 레퍼런스 생성\r\n    const [drawnItems, setDrawnItems] = useState(null); // 도형 정보 상태\r\n  \r\n    useEffect(() => {\r\n      if (!mapRef.current) {\r\n        const map = L.map('map').setView([10.7369, 106.6773], 13); // RMIT Vietnam Ho Chi Minh Campus coordinates\r\n  \r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n          attribution: '© OpenStreetMap contributors',\r\n        }).addTo(map);\r\n  \r\n        const drawnItems = new L.FeatureGroup(); // 그린 도형을 담을 FeatureGroup 생성\r\n        map.addLayer(drawnItems);\r\n  \r\n        const drawControl = new L.Control.Draw({\r\n          edit: {\r\n            featureGroup: drawnItems,\r\n          },\r\n          draw: {\r\n            polygon: true,\r\n            polyline: false,\r\n            circle: false,\r\n            marker: false,\r\n            circlemarker: false,\r\n            rectangle: true,\r\n          },\r\n        });\r\n        map.addControl(drawControl);\r\n\r\n        mapRef.current = map; // 맵 레퍼런스에 할당\r\n      }\r\n\r\n      mapRef.current.on(L.Draw.Event.CREATED, (event) => {\r\n        const layer = event.layer;\r\n        mapRef.current.addLayer(layer);\r\n        setDrawnItems(mapRef.current.toGeoJSON()); // 그려진 도형을 GeoJSON 형식으로 상태에 저장\r\n      });\r\n    }, []);\r\n  \r\n    const sendDataToServer = () => {\r\n      // drawnItems 상태에 저장된 도형 정보를 서버로 보냄 (Axios 또는 Fetch API 사용)\r\n      axios.post('/api/save-shape', { shapeData: drawnItems })\r\n        .then(response => {\r\n          console.log(response.data.message);\r\n        })\r\n        .catch(error => {\r\n          console.error('Error saving shape:', error);\r\n        });\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <div id=\"map\" style={{ height: '500px' }}></div>\r\n        <button onClick={sendDataToServer}>Save Shape</button>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default MapComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
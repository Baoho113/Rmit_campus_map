{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\young\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\Rmit_campus_map\\\\frontend\\\\src\\\\GeoJSONMap.js\",\n  _s = $RefreshSig$();\n// GeoJSONMap.js\nimport React, { useEffect, useState, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./building_info/buildingCollection\";\nimport univLayer from \"./univLayer.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GeoJSONMap() {\n  _s();\n  const mapRef = useRef(null);\n  const imageRef = useRef(null);\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n  useEffect(() => {\n    mapRef.current = L.map(\"map\", {\n      center: [10.7298, 106.69451],\n      zoom: 20\n    });\n\n    // Add OpenStreetMap tile layer\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {}).addTo(mapRef.current);\n\n    // Add B2L2 image\n    imageRef.current = L.imageOverlay(\"/images/B2L2.png\", [[10.7305, 106.6945],\n    // 좌측 상단의 위도, 경도 값\n    [10.7291, 106.6956] // 우측 하단의 위도, 경도 값\n    ]).addTo(mapRef.current);\n\n    // Add university layer\n    const univLayerGroup = L.geoJSON(univLayer, {\n      style: {\n        fillColor: \"yellow\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.2\n      },\n      onEachFeature: (feature, layer) => {\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      }\n    });\n    univLayerGroup.addTo(mapRef.current);\n\n    // Add building polygons\n    const buildingPolygons = [];\n    const layers = L.geoJSON(geojsonFeature, {\n      style: {\n        fillColor: \"blue\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.3\n      },\n      onEachFeature: (feature, layer) => {\n        layer.bindPopup(feature.properties.name);\n        buildingPolygons.push(layer);\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      }\n    });\n    layers.addTo(mapRef.current);\n\n    // Handle click on the map\n    mapRef.current.on(\"click\", function (e) {\n      const clickedLatLng = e.latlng;\n      const clickedBuilding = buildingPolygons.find(layer => layer.getBounds().contains(clickedLatLng));\n      if (clickedBuilding) {\n        const clickedBuildingName = clickedBuilding.feature.properties.name;\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n        setSelectedBuilding(null);\n      }\n    });\n    return () => {\n      mapRef.current.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: \"500px\",\n        width: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Building:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: selectedBuilding || \"No building selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(GeoJSONMap, \"OhnFJUDe7Su58ItrldPA6vk7mio=\");\n_c = GeoJSONMap;\nexport default GeoJSONMap;\nvar _c;\n$RefreshReg$(_c, \"GeoJSONMap\");","map":{"version":3,"names":["React","useEffect","useState","useRef","L","geojsonFeature","univLayer","jsxDEV","_jsxDEV","GeoJSONMap","_s","mapRef","imageRef","selectedBuilding","setSelectedBuilding","current","map","center","zoom","tileLayer","addTo","imageOverlay","univLayerGroup","geoJSON","style","fillColor","color","weight","fillOpacity","onEachFeature","feature","layer","on","clickedBuildingName","properties","name","buildingPolygons","layers","bindPopup","push","e","clickedLatLng","latlng","clickedBuilding","find","getBounds","contains","openPopup","remove","children","id","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/young/OneDrive/바탕 화면/Rmit_campus_map/frontend/src/GeoJSONMap.js"],"sourcesContent":["// GeoJSONMap.js\nimport React, { useEffect, useState, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./building_info/buildingCollection\";\nimport univLayer from \"./univLayer.json\";\n\nfunction GeoJSONMap() {\n  const mapRef = useRef(null);\n  const imageRef = useRef(null);\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n\n  useEffect(() => {\n    mapRef.current = L.map(\"map\", {\n      center: [10.7298, 106.69451],\n      zoom: 20,\n    });\n\n    // Add OpenStreetMap tile layer\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {}).addTo(mapRef.current);\n\n    // Add B2L2 image\n    imageRef.current = L.imageOverlay(\"/images/B2L2.png\", [\n      [10.7305, 106.6945], // 좌측 상단의 위도, 경도 값\n      [10.7291, 106.6956], // 우측 하단의 위도, 경도 값\n    ]).addTo(mapRef.current);\n\n    // Add university layer\n    const univLayerGroup = L.geoJSON(univLayer, {\n      style: {\n        fillColor: \"yellow\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.2,\n      },\n      onEachFeature: (feature, layer) => {\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      },\n    });\n\n    univLayerGroup.addTo(mapRef.current);\n\n    // Add building polygons\n    const buildingPolygons = [];\n    const layers = L.geoJSON(geojsonFeature, {\n      style: {\n        fillColor: \"blue\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.3,\n      },\n      onEachFeature: (feature, layer) => {\n        layer.bindPopup(feature.properties.name);\n        buildingPolygons.push(layer);\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      },\n    });\n\n    layers.addTo(mapRef.current);\n\n    // Handle click on the map\n    mapRef.current.on(\"click\", function (e) {\n      const clickedLatLng = e.latlng;\n      const clickedBuilding = buildingPolygons.find((layer) =>\n        layer.getBounds().contains(clickedLatLng)\n      );\n\n      if (clickedBuilding) {\n        const clickedBuildingName = clickedBuilding.feature.properties.name;\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n        setSelectedBuilding(null);\n      }\n    });\n\n    return () => {\n      mapRef.current.remove();\n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"map\" style={{ height: \"500px\", width: \"100%\" }}></div>\n      <div>\n        <h3>Selected Building:</h3>\n        <p>{selectedBuilding || \"No building selected\"}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default GeoJSONMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
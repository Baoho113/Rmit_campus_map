{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ga020\\\\OneDrive\\\\Desktop\\\\\\u3000\\u3000\\\\Building IT Systems\\\\frontend\\\\src\\\\GeoJSONMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./drawn_shape.json\"; // geojson 파일 경로\nimport leafletPip from 'leaflet-pip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeoJSONMap = () => {\n  _s();\n  useEffect(() => {\n    const map = L.map(\"map\").setView([10.7298, 106.69451], 20);\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: \"© OpenStreetMap contributors\"\n    }).addTo(map);\n\n    // L.geoJSON(geojsonFeature, {\n    //     onEachFeature: (feature, layer) => {\n    //         const name = feature.properties.name;\n    //         layer.bindPopup(name);\n    //     }\n    // }).addTo(map);\n\n    // 건물들의 다각형을 모두 생성하여 배열에 추가\n    const buildingPolygons = geojsonFeature.features.map(feature => L.geoJSON(feature).getLayers()[0]);\n\n    // 모든 다각형을 지도에 추가\n    buildingPolygons.forEach(polygon => {\n      polygon.addTo(map);\n      polygon.on('click', function () {\n        const name = this.feature.properties.name;\n        if (name === 'building 7') {\n          // 건물 7을 클릭했을 때 팝업을 띄웁니다.\n          this.bindPopup('Building 7').openPopup();\n        } else {\n          // 다른 건물을 클릭했을 때 팝업을 띄웁니다.\n          this.bindPopup(name).openPopup();\n        }\n      });\n    });\n    return () => {\n      map.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      height: \"500px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(GeoJSONMap, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = GeoJSONMap;\nexport default GeoJSONMap;\nvar _c;\n$RefreshReg$(_c, \"GeoJSONMap\");","map":{"version":3,"names":["React","useEffect","L","geojsonFeature","leafletPip","jsxDEV","_jsxDEV","GeoJSONMap","_s","map","setView","tileLayer","attribution","addTo","buildingPolygons","features","feature","geoJSON","getLayers","forEach","polygon","on","name","properties","bindPopup","openPopup","remove","id","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ga020/OneDrive/Desktop/　　/Building IT Systems/frontend/src/GeoJSONMap.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport geojsonFeature from \"./drawn_shape.json\"; // geojson 파일 경로\r\nimport leafletPip from 'leaflet-pip';\r\n\r\n\r\nconst GeoJSONMap = () => {\r\n  useEffect(() => {\r\n    const map = L.map(\"map\").setView([10.7298, 106.69451], 20);\r\n\r\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n      attribution: \"© OpenStreetMap contributors\",\r\n    }).addTo(map);\r\n\r\n    // L.geoJSON(geojsonFeature, {\r\n    //     onEachFeature: (feature, layer) => {\r\n    //         const name = feature.properties.name;\r\n    //         layer.bindPopup(name);\r\n    //     }\r\n    // }).addTo(map);\r\n\r\n// 건물들의 다각형을 모두 생성하여 배열에 추가\r\nconst buildingPolygons = geojsonFeature.features.map(feature => L.geoJSON(feature).getLayers()[0]);\r\n\r\n// 모든 다각형을 지도에 추가\r\nbuildingPolygons.forEach(polygon => {\r\n  polygon.addTo(map);\r\n  polygon.on('click', function () {\r\n    const name = this.feature.properties.name;\r\n    if (name === 'building 7') {\r\n      // 건물 7을 클릭했을 때 팝업을 띄웁니다.\r\n      this.bindPopup('Building 7').openPopup();\r\n    } else {\r\n      // 다른 건물을 클릭했을 때 팝업을 띄웁니다.\r\n      this.bindPopup(name).openPopup();\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\n    return () => {\r\n      map.remove();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"map\" style={{ height: \"500px\" }}>\r\n      {/* 지도를 렌더링할 div 요소 */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeoJSONMap;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B;AACjC,OAAOC,cAAc,MAAM,oBAAoB,CAAC,CAAC;AACjD,OAAOC,UAAU,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGrC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvBP,SAAS,CAAC,MAAM;IACd,MAAMQ,GAAG,GAAGP,CAAC,CAACO,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE,EAAE,CAAC;IAE1DR,CAAC,CAACS,SAAS,CAAC,oDAAoD,EAAE;MAChEC,WAAW,EAAE;IACf,CAAC,CAAC,CAACC,KAAK,CAACJ,GAAG,CAAC;;IAEb;IACA;IACA;IACA;IACA;IACA;;IAEJ;IACA,MAAMK,gBAAgB,GAAGX,cAAc,CAACY,QAAQ,CAACN,GAAG,CAACO,OAAO,IAAId,CAAC,CAACe,OAAO,CAACD,OAAO,CAAC,CAACE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;IAElG;IACAJ,gBAAgB,CAACK,OAAO,CAACC,OAAO,IAAI;MAClCA,OAAO,CAACP,KAAK,CAACJ,GAAG,CAAC;MAClBW,OAAO,CAACC,EAAE,CAAC,OAAO,EAAE,YAAY;QAC9B,MAAMC,IAAI,GAAG,IAAI,CAACN,OAAO,CAACO,UAAU,CAACD,IAAI;QACzC,IAAIA,IAAI,KAAK,YAAY,EAAE;UACzB;UACA,IAAI,CAACE,SAAS,CAAC,YAAY,CAAC,CAACC,SAAS,CAAC,CAAC;QAC1C,CAAC,MAAM;UACL;UACA,IAAI,CAACD,SAAS,CAACF,IAAI,CAAC,CAACG,SAAS,CAAC,CAAC;QAClC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAIE,OAAO,MAAM;MACXhB,GAAG,CAACiB,MAAM,CAAC,CAAC;IACd,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEpB,OAAA;IAAKqB,EAAE,EAAC,KAAK;IAACC,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEpC,CAAC;AAEV,CAAC;AAACzB,EAAA,CA7CID,UAAU;AAAA2B,EAAA,GAAV3B,UAAU;AA+ChB,eAAeA,UAAU;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\young\\\\Downloads\\\\Rmit_campus_map\\\\Rmit_campus_map\\\\frontend\\\\src\\\\GeoJSONMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./building_info/buildingCollection\";\nimport univLayer from \"./univLayer.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeoJSONMap = () => {\n  _s();\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n  useEffect(() => {\n    let map;\n    let buildingPolygons = [];\n    const initializeMap = () => {\n      map = L.map(\"map\", {\n        center: [10.7298, 106.69451],\n        zoom: 20\n      });\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        attribution: \"© OpenStreetMap contributors\"\n      }).addTo(map);\n      const univLayerGroup = L.geoJSON(univLayer, {\n        style: {\n          fillColor: \"yellow\",\n          color: \"black\",\n          weight: 1,\n          fillOpacity: 0.2\n        },\n        onEachFeature: (feature, layer) => {\n          layer.on(\"click\", () => {\n            const clickedBuildingName = feature.properties.name;\n            setSelectedBuilding(clickedBuildingName);\n          });\n        }\n      });\n      univLayerGroup.addTo(map);\n      const layers = L.geoJSON(geojsonFeature, {\n        style: {\n          fillColor: \"blue\",\n          color: \"white\",\n          weight: 1,\n          fillOpacity: 0.5\n        },\n        onEachFeature: (feature, layer) => {\n          layer.bindPopup(feature.properties.name);\n          buildingPolygons.push(layer);\n          layer.on(\"click\", () => {\n            const clickedBuildingName = feature.properties.name;\n            setSelectedBuilding(clickedBuildingName);\n          });\n        }\n      });\n      layers.addTo(map);\n      map.on(\"click\", function (e) {\n        const clickedLatLng = e.latlng;\n        const clickedBuilding = buildingPolygons.find(layer => layer.getBounds().contains(clickedLatLng));\n        if (clickedBuilding) {\n          const clickedBuildingName = clickedBuilding.feature.properties.name;\n          clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n          setSelectedBuilding(null);\n        }\n      });\n      buildingPolygons.forEach(sourceBuilding => {\n        buildingPolygons.forEach(targetBuilding => {\n          if (sourceBuilding !== targetBuilding) {\n            const sourceLatLng = sourceBuilding.getBounds().getCenter();\n            const targetLatLng = targetBuilding.getBounds().getCenter();\n            L.polyline([sourceLatLng, targetLatLng], {\n              color: \"red\"\n            }).addTo(map);\n          }\n        });\n      });\n\n      // 사용자의 현재 위치를 가져오는 함수\n      const getUserLocation = () => {\n        if (\"geolocation\" in navigator) {\n          navigator.geolocation.getCurrentPosition(position => {\n            const {\n              latitude,\n              longitude\n            } = position.coords;\n            setUserLocation([latitude, longitude]);\n          }, error => {\n            console.error(\"Error getting user location:\", error);\n          });\n        } else {\n          console.error(\"Geolocation is not supported by your browser\");\n        }\n      };\n      getUserLocation(); // 페이지 로딩 시 사용자 위치 가져오기\n    };\n    initializeMap();\n    return () => {\n      if (map) {\n        map.remove();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (userLocation) {\n      const userMarker = L.marker(userLocation, {\n        icon: L.divIcon({\n          className: 'user-marker',\n          iconSize: [20, 20],\n          html: '<div style=\"background-color: blue; border-radius: 50%; width: 20px; height: 20px;\"></div>'\n        })\n      });\n      userMarker.addTo(map);\n    }\n  }, [userLocation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: \"500px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), selectedBuilding && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedBuilding(null),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedBuilding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `images/${selectedBuilding}.jpg`,\n        alt: selectedBuilding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Description of \", selectedBuilding]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(GeoJSONMap, \"HfWVTrMZ+o+TMZdj6oHN7xMYDK4=\");\n_c = GeoJSONMap;\nexport default GeoJSONMap;\nvar _c;\n$RefreshReg$(_c, \"GeoJSONMap\");","map":{"version":3,"names":["React","useEffect","useState","L","geojsonFeature","univLayer","jsxDEV","_jsxDEV","GeoJSONMap","_s","selectedBuilding","setSelectedBuilding","userLocation","setUserLocation","map","buildingPolygons","initializeMap","center","zoom","tileLayer","attribution","addTo","univLayerGroup","geoJSON","style","fillColor","color","weight","fillOpacity","onEachFeature","feature","layer","on","clickedBuildingName","properties","name","layers","bindPopup","push","e","clickedLatLng","latlng","clickedBuilding","find","getBounds","contains","openPopup","forEach","sourceBuilding","targetBuilding","sourceLatLng","getCenter","targetLatLng","polyline","getUserLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","error","console","remove","userMarker","marker","icon","divIcon","className","iconSize","html","children","id","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/young/Downloads/Rmit_campus_map/Rmit_campus_map/frontend/src/GeoJSONMap.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./building_info/buildingCollection\";\nimport univLayer from \"./univLayer.json\";\n\nconst GeoJSONMap = () => {\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n\n  useEffect(() => {\n    let map;\n    let buildingPolygons = [];\n\n    const initializeMap = () => {\n      map = L.map(\"map\", {\n        center: [10.7298, 106.69451],\n        zoom: 20,\n      });\n\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        attribution: \"© OpenStreetMap contributors\",\n      }).addTo(map);\n\n      const univLayerGroup = L.geoJSON(univLayer, {\n        style: {\n          fillColor: \"yellow\",\n          color: \"black\",\n          weight: 1,\n          fillOpacity: 0.2,\n        },\n        onEachFeature: (feature, layer) => {\n          layer.on(\"click\", () => {\n            const clickedBuildingName = feature.properties.name;\n            setSelectedBuilding(clickedBuildingName);\n          });\n        },\n      });\n\n      univLayerGroup.addTo(map);\n\n      const layers = L.geoJSON(geojsonFeature, {\n        style: {\n          fillColor: \"blue\",\n          color: \"white\",\n          weight: 1,\n          fillOpacity: 0.5,\n        },\n        onEachFeature: (feature, layer) => {\n          layer.bindPopup(feature.properties.name);\n          buildingPolygons.push(layer);\n          layer.on(\"click\", () => {\n            const clickedBuildingName = feature.properties.name;\n            setSelectedBuilding(clickedBuildingName);\n          });\n        },\n      });\n\n      layers.addTo(map);\n\n      map.on(\"click\", function (e) {\n        const clickedLatLng = e.latlng;\n        const clickedBuilding = buildingPolygons.find((layer) =>\n          layer.getBounds().contains(clickedLatLng)\n        );\n\n        if (clickedBuilding) {\n          const clickedBuildingName = clickedBuilding.feature.properties.name;\n          clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n          setSelectedBuilding(null);\n        }\n      });\n\n      buildingPolygons.forEach((sourceBuilding) => {\n        buildingPolygons.forEach((targetBuilding) => {\n          if (sourceBuilding !== targetBuilding) {\n            const sourceLatLng = sourceBuilding.getBounds().getCenter();\n            const targetLatLng = targetBuilding.getBounds().getCenter();\n\n            L.polyline([sourceLatLng, targetLatLng], {\n              color: \"red\",\n            }).addTo(map);\n          }\n        });\n      });\n\n      // 사용자의 현재 위치를 가져오는 함수\n      const getUserLocation = () => {\n        if (\"geolocation\" in navigator) {\n          navigator.geolocation.getCurrentPosition(\n            (position) => {\n              const { latitude, longitude } = position.coords;\n              setUserLocation([latitude, longitude]);\n            },\n            (error) => {\n              console.error(\"Error getting user location:\", error);\n            }\n          );\n        } else {\n          console.error(\"Geolocation is not supported by your browser\");\n        }\n      };\n\n      getUserLocation(); // 페이지 로딩 시 사용자 위치 가져오기\n    };\n\n    initializeMap();\n\n    return () => {\n      if (map) {\n        map.remove();\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (userLocation) {\n      const userMarker = L.marker(userLocation, {\n        icon: L.divIcon({\n          className: 'user-marker',\n          iconSize: [20, 20],\n          html: '<div style=\"background-color: blue; border-radius: 50%; width: 20px; height: 20px;\"></div>',\n        }),\n      });\n      userMarker.addTo(map);\n    }\n  }, [userLocation]);\n\n  return (\n    <div>\n      <div id=\"map\" style={{ height: \"500px\" }}></div>\n      {selectedBuilding && (\n        <div className=\"navigation-bar\">\n          <button onClick={() => setSelectedBuilding(null)}>X</button>\n          <h2>{selectedBuilding}</h2>\n          <img src={`images/${selectedBuilding}.jpg`} alt={selectedBuilding} />\n          <p>Description of {selectedBuilding}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GeoJSONMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\young\\\\Downloads\\\\Rmit_campus_map\\\\Rmit_campus_map\\\\frontend\\\\src\\\\GeoJSONMap.js\",\n  _s = $RefreshSig$();\n// GeoJSONMap.js\n\nimport React, { useEffect, useState } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./building_info/buildingCollection\";\nimport univLayer from \"./univLayer.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeoJSONMap = () => {\n  _s();\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n  const [currentLocation, setCurrentLocation] = useState(null);\n  useEffect(() => {\n    const map = L.map(\"map\", {\n      center: [10.7298, 106.69451],\n      zoom: 20\n    });\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: \"© OpenStreetMap contributors\"\n    }).addTo(map);\n\n    // Get current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCurrentLocation([latitude, longitude]);\n\n        // Add user icon to the map\n        const userIcon = L.divIcon({\n          className: \"user-icon\",\n          html: '<i class=\"fas fa-user\"></i>'\n        });\n        L.marker([latitude, longitude], {\n          icon: userIcon\n        }).addTo(map);\n      }, error => {\n        console.error(\"Error getting current location:\", error.message);\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n\n    // Get current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setCurrentLocation([latitude, longitude]);\n      }, error => {\n        console.error(\"Error getting current location:\", error.message);\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n    const univLayerGroup = L.geoJSON(univLayer, {\n      style: {\n        fillColor: \"yellow\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.2\n      },\n      onEachFeature: (feature, layer) => {\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      }\n    });\n    univLayerGroup.addTo(map);\n    const buildingPolygons = [];\n    const layers = L.geoJSON(geojsonFeature, {\n      style: {\n        fillColor: \"blue\",\n        color: \"white\",\n        weight: 1,\n        fillOpacity: 0.5\n      },\n      onEachFeature: (feature, layer) => {\n        layer.bindPopup(feature.properties.name);\n        buildingPolygons.push(layer);\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      }\n    });\n    layers.addTo(map);\n    map.on(\"click\", function (e) {\n      const clickedLatLng = e.latlng;\n      const clickedBuilding = buildingPolygons.find(layer => layer.getBounds().contains(clickedLatLng));\n      if (clickedBuilding) {\n        const clickedBuildingName = clickedBuilding.feature.properties.name;\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n        setSelectedBuilding(null);\n      }\n    });\n\n    // Draw arrows between buildings\n    buildingPolygons.forEach(sourceBuilding => {\n      buildingPolygons.forEach(targetBuilding => {\n        if (sourceBuilding !== targetBuilding) {\n          const sourceLatLng = sourceBuilding.getBounds().getCenter();\n          const targetLatLng = targetBuilding.getBounds().getCenter();\n          L.polyline([sourceLatLng, targetLatLng], {\n            color: \"red\"\n          }).addTo(map);\n        }\n      });\n    });\n    return () => {\n      map.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: \"500px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), currentLocation && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"current-location\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Location: \", currentLocation.join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this), selectedBuilding && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedBuilding(null),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedBuilding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `images/${selectedBuilding}.jpg`,\n        alt: selectedBuilding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Description of \", selectedBuilding]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(GeoJSONMap, \"hR60R8lenZn0osFLfEgWo3fpyk0=\");\n_c = GeoJSONMap;\nexport default GeoJSONMap;\nvar _c;\n$RefreshReg$(_c, \"GeoJSONMap\");","map":{"version":3,"names":["React","useEffect","useState","L","geojsonFeature","univLayer","jsxDEV","_jsxDEV","GeoJSONMap","_s","selectedBuilding","setSelectedBuilding","currentLocation","setCurrentLocation","map","center","zoom","tileLayer","attribution","addTo","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","userIcon","divIcon","className","html","marker","icon","error","console","message","univLayerGroup","geoJSON","style","fillColor","color","weight","fillOpacity","onEachFeature","feature","layer","on","clickedBuildingName","properties","name","buildingPolygons","layers","bindPopup","push","e","clickedLatLng","latlng","clickedBuilding","find","getBounds","contains","openPopup","forEach","sourceBuilding","targetBuilding","sourceLatLng","getCenter","targetLatLng","polyline","remove","children","id","height","fileName","_jsxFileName","lineNumber","columnNumber","join","onClick","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/young/Downloads/Rmit_campus_map/Rmit_campus_map/frontend/src/GeoJSONMap.js"],"sourcesContent":["// GeoJSONMap.js\n\nimport React, { useEffect, useState } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./building_info/buildingCollection\";\nimport univLayer from \"./univLayer.json\";\n\nconst GeoJSONMap = () => {\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n  const [currentLocation, setCurrentLocation] = useState(null);\n\n  useEffect(() => {\n    const map = L.map(\"map\", {\n      center: [10.7298, 106.69451],\n      zoom: 20,\n    });\n\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: \"© OpenStreetMap contributors\",\n    }).addTo(map);\n\n    // Get current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setCurrentLocation([latitude, longitude]);\n\n          // Add user icon to the map\n          const userIcon = L.divIcon({\n            className: \"user-icon\",\n            html: '<i class=\"fas fa-user\"></i>',\n          });\n\n          L.marker([latitude, longitude], {\n            icon: userIcon,\n          }).addTo(map);\n        },\n        (error) => {\n          console.error(\"Error getting current location:\", error.message);\n        }\n      );\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n\n    // Get current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setCurrentLocation([latitude, longitude]);\n        },\n        (error) => {\n          console.error(\"Error getting current location:\", error.message);\n        }\n      );\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n\n    const univLayerGroup = L.geoJSON(univLayer, {\n      style: {\n        fillColor: \"yellow\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.2,\n      },\n      onEachFeature: (feature, layer) => {\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      },\n    });\n\n    univLayerGroup.addTo(map);\n\n    const buildingPolygons = [];\n    const layers = L.geoJSON(geojsonFeature, {\n      style: {\n        fillColor: \"blue\",\n        color: \"white\",\n        weight: 1,\n        fillOpacity: 0.5,\n      },\n      onEachFeature: (feature, layer) => {\n        layer.bindPopup(feature.properties.name);\n        buildingPolygons.push(layer);\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      },\n    });\n\n    layers.addTo(map);\n\n    map.on(\"click\", function (e) {\n      const clickedLatLng = e.latlng;\n      const clickedBuilding = buildingPolygons.find((layer) =>\n        layer.getBounds().contains(clickedLatLng)\n      );\n\n      if (clickedBuilding) {\n        const clickedBuildingName = clickedBuilding.feature.properties.name;\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n        setSelectedBuilding(null);\n      }\n    });\n\n    // Draw arrows between buildings\n    buildingPolygons.forEach((sourceBuilding) => {\n      buildingPolygons.forEach((targetBuilding) => {\n        if (sourceBuilding !== targetBuilding) {\n          const sourceLatLng = sourceBuilding.getBounds().getCenter();\n          const targetLatLng = targetBuilding.getBounds().getCenter();\n\n          L.polyline([sourceLatLng, targetLatLng], {\n            color: \"red\",\n          }).addTo(map);\n        }\n      });\n    });\n\n    return () => {\n      map.remove();\n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"map\" style={{ height: \"500px\" }}></div>\n      {currentLocation && (\n        <div className=\"current-location\">\n          <p>Current Location: {currentLocation.join(\", \")}</p>\n        </div>\n      )}\n      {selectedBuilding && (\n        <div className=\"navigation-bar\">\n          <button onClick={() => setSelectedBuilding(null)}>X</button>\n          <h2>{selectedBuilding}</h2>\n          <img\n            src={`images/${selectedBuilding}.jpg`}\n            alt={selectedBuilding}\n          />\n          <p>Description of {selectedBuilding}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GeoJSONMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
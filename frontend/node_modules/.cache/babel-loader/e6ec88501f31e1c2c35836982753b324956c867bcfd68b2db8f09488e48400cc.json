{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\young\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\Rmit_campus_map-main\\\\frontend\\\\src\\\\MapComponent.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// MapComponent.js\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapComponent() {\n  _s();\n  const mapRef = useRef(null);\n  const drawnItems = useRef(null);\n  const [geoJsonPath, setGeoJsonPath] = useState(\"\");\n  useEffect(() => {\n    if (!mapRef.current) {\n      const map = L.map(\"map\", {\n        drawControl: true\n      }).setView([37.5665, 126.9780], 13);\n      const imageUrl = \"images/B2L2.png\";\n      const imageBounds = [[37.527, 126.83], [37.608, 127.13]];\n      L.imageOverlay(imageUrl, imageBounds).addTo(map);\n      drawnItems.current = new L.FeatureGroup();\n      map.addLayer(drawnItems.current);\n      const drawControl = new L.Control.Draw({\n        edit: {\n          featureGroup: drawnItems.current\n        },\n        draw: {\n          polygon: true,\n          polyline: true,\n          circle: false,\n          marker: true,\n          circlemarker: false,\n          rectangle: true\n        }\n      });\n      map.addControl(drawControl);\n      mapRef.current = map;\n      map.on(L.Draw.Event.CREATED, event => {\n        const layer = event.layer;\n        drawnItems.current.addLayer(layer);\n      });\n    }\n  }, []);\n  const saveShape = async () => {\n    if (drawnItems.current) {\n      const geoJSON = drawnItems.current.toGeoJSON();\n      const stringifiedData = JSON.stringify(geoJSON, null, 2);\n      try {\n        // Save GeoJSON to the server\n        const response = await axios.post(\"/api/save-shape\", {\n          shapeData: stringifiedData\n        });\n\n        // Set the returned GeoJSON path\n        setGeoJsonPath(response.data.geoJsonPath);\n        console.log(response.data.message);\n      } catch (error) {\n        console.error(\"Error saving shape:\", error);\n      }\n    }\n  };\n\n  // Load GeoJSON from the server when the component mounts\n  useEffect(() => {\n    const loadGeoJson = async () => {\n      try {\n        const response = await axios.get(\"/api/load-shape\");\n        setGeoJsonPath(response.data.geoJsonPath);\n      } catch (error) {\n        console.error(\"Error loading shape:\", error);\n      }\n    };\n    loadGeoJson();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: \"620px\",\n        margin: \"auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveShape,\n      children: \"Save Shape\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), geoJsonPath && /*#__PURE__*/_jsxDEV(GeoJSONLayer, {\n      geoJsonPath: geoJsonPath,\n      map: mapRef.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n// New component to render GeoJSON layer\n_s(MapComponent, \"LtU94sp+7vMviWSh7wAWZuraITk=\");\n_c = MapComponent;\nfunction GeoJSONLayer({\n  geoJsonPath,\n  map\n}) {\n  _s2();\n  const geoJsonRef = useRef(null);\n  useEffect(() => {\n    if (!geoJsonRef.current) {\n      // Load GeoJSON from the server\n      axios.get(geoJsonPath).then(response => {\n        const geoJSON = response.data;\n        const geoJsonLayer = L.geoJSON(geoJSON).addTo(map);\n        geoJsonRef.current = geoJsonLayer;\n      });\n    }\n  }, [geoJsonPath, map]);\n  return null; // This component doesn't render anything\n}\n_s2(GeoJSONLayer, \"M4pjK1P1Jc1o47sK25JLwSbIgUg=\");\n_c2 = GeoJSONLayer;\nexport default MapComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"MapComponent\");\n$RefreshReg$(_c2, \"GeoJSONLayer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","axios","jsxDEV","_jsxDEV","MapComponent","_s","mapRef","drawnItems","geoJsonPath","setGeoJsonPath","current","map","drawControl","setView","imageUrl","imageBounds","imageOverlay","addTo","FeatureGroup","addLayer","Control","Draw","edit","featureGroup","draw","polygon","polyline","circle","marker","circlemarker","rectangle","addControl","on","Event","CREATED","event","layer","saveShape","geoJSON","toGeoJSON","stringifiedData","JSON","stringify","response","post","shapeData","data","console","log","message","error","loadGeoJson","get","children","id","style","height","margin","fileName","_jsxFileName","lineNumber","columnNumber","onClick","GeoJSONLayer","_c","_s2","geoJsonRef","then","geoJsonLayer","_c2","$RefreshReg$"],"sources":["C:/Users/young/OneDrive/바탕 화면/Rmit_campus_map-main/frontend/src/MapComponent.js"],"sourcesContent":["// MapComponent.js\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport axios from \"axios\";\n\nfunction MapComponent() {\n  const mapRef = useRef(null);\n  const drawnItems = useRef(null);\n  const [geoJsonPath, setGeoJsonPath] = useState(\"\");\n\n  useEffect(() => {\n    if (!mapRef.current) {\n      const map = L.map(\"map\", { drawControl: true }).setView(\n        [37.5665, 126.9780],\n        13\n      );\n\n      const imageUrl = \"images/B2L2.png\";\n      const imageBounds = [\n        [37.527, 126.83],\n        [37.608, 127.13],\n      ];\n\n      L.imageOverlay(imageUrl, imageBounds).addTo(map);\n\n      drawnItems.current = new L.FeatureGroup();\n      map.addLayer(drawnItems.current);\n\n      const drawControl = new L.Control.Draw({\n        edit: {\n          featureGroup: drawnItems.current,\n        },\n        draw: {\n          polygon: true,\n          polyline: true,\n          circle: false,\n          marker: true,\n          circlemarker: false,\n          rectangle: true,\n        },\n      });\n      map.addControl(drawControl);\n\n      mapRef.current = map;\n\n      map.on(L.Draw.Event.CREATED, (event) => {\n        const layer = event.layer;\n        drawnItems.current.addLayer(layer);\n      });\n    }\n  }, []);\n\n  const saveShape = async () => {\n    if (drawnItems.current) {\n      const geoJSON = drawnItems.current.toGeoJSON();\n      const stringifiedData = JSON.stringify(geoJSON, null, 2);\n\n      try {\n        // Save GeoJSON to the server\n        const response = await axios.post(\"/api/save-shape\", {\n          shapeData: stringifiedData,\n        });\n\n        // Set the returned GeoJSON path\n        setGeoJsonPath(response.data.geoJsonPath);\n\n        console.log(response.data.message);\n      } catch (error) {\n        console.error(\"Error saving shape:\", error);\n      }\n    }\n  };\n\n  // Load GeoJSON from the server when the component mounts\n  useEffect(() => {\n    const loadGeoJson = async () => {\n      try {\n        const response = await axios.get(\"/api/load-shape\");\n        setGeoJsonPath(response.data.geoJsonPath);\n      } catch (error) {\n        console.error(\"Error loading shape:\", error);\n      }\n    };\n\n    loadGeoJson();\n  }, []);\n\n  return (\n    <div>\n      <div id=\"map\" style={{ height: \"620px\", margin: \"auto\" }}></div>\n      <button onClick={saveShape}>Save Shape</button>\n\n      {/* Render the GeoJSON layer */}\n      {geoJsonPath && (\n        <GeoJSONLayer geoJsonPath={geoJsonPath} map={mapRef.current} />\n      )}\n    </div>\n  );\n}\n\n// New component to render GeoJSON layer\nfunction GeoJSONLayer({ geoJsonPath, map }) {\n  const geoJsonRef = useRef(null);\n\n  useEffect(() => {\n    if (!geoJsonRef.current) {\n      // Load GeoJSON from the server\n      axios.get(geoJsonPath).then((response) => {\n        const geoJSON = response.data;\n        const geoJsonLayer = L.geoJSON(geoJSON).addTo(map);\n\n        geoJsonRef.current = geoJsonLayer;\n      });\n    }\n  }, [geoJsonPath, map]);\n\n  return null; // This component doesn't render anything\n}\n\nexport default MapComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
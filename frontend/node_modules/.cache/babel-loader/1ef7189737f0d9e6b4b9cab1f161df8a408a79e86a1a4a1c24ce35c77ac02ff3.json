{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\young\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\Rmit_campus_map\\\\frontend\\\\src\\\\GeoJSONMap.js\",\n  _s = $RefreshSig$();\n// GeoJSONMap.js\n\nimport React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport geojsonData from './building_info/buildingCollection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GeoJSONMap() {\n  _s();\n  const mapRef = useRef(null);\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n  useEffect(() => {\n    // Create a map and store it in the ref\n    mapRef.current = L.map('map', {\n      center: [10.7298, 106.69451],\n      zoom: 20\n    });\n\n    // Add OpenStreetMap tile layer\n    L.tileLayer('images/B2L2.png', {}).addTo(mapRef.current);\n\n    // Display GeoJSON data on the map\n    const geoJSONLayer = L.geoJSON(geojsonData, {\n      style: {\n        fillColor: 'blue',\n        color: 'black',\n        weight: 1,\n        fillOpacity: 0.3\n      },\n      onEachFeature: (feature, layer) => {\n        layer.bindPopup(feature.properties.name);\n        layer.on('click', () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      }\n    });\n    geoJSONLayer.addTo(mapRef.current);\n\n    // Handle click on the map\n    mapRef.current.on('click', function (e) {\n      const clickedLatLng = e.latlng;\n      const clickedBuilding = geoJSONLayer.getLayers().find(layer => layer.getBounds().contains(clickedLatLng));\n      if (clickedBuilding) {\n        const clickedBuildingName = clickedBuilding.feature.properties.name;\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n        setSelectedBuilding(null);\n      }\n    });\n    return () => {\n      mapRef.current.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: '500px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Building:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: selectedBuilding || 'No building selected'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(GeoJSONMap, \"V3hjMIBLyuoILHYHgEDaNGgUMq0=\");\n_c = GeoJSONMap;\nexport default GeoJSONMap;\nvar _c;\n$RefreshReg$(_c, \"GeoJSONMap\");","map":{"version":3,"names":["React","useEffect","useRef","L","geojsonData","jsxDEV","_jsxDEV","GeoJSONMap","_s","mapRef","selectedBuilding","setSelectedBuilding","useState","current","map","center","zoom","tileLayer","addTo","geoJSONLayer","geoJSON","style","fillColor","color","weight","fillOpacity","onEachFeature","feature","layer","bindPopup","properties","name","on","clickedBuildingName","e","clickedLatLng","latlng","clickedBuilding","getLayers","find","getBounds","contains","openPopup","remove","children","id","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/young/OneDrive/바탕 화면/Rmit_campus_map/frontend/src/GeoJSONMap.js"],"sourcesContent":["// GeoJSONMap.js\n\nimport React, { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport geojsonData from './building_info/buildingCollection';\n\nfunction GeoJSONMap() {\n  const mapRef = useRef(null);\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n\n  useEffect(() => {\n    // Create a map and store it in the ref\n    mapRef.current = L.map('map', {\n      center: [10.7298, 106.69451],\n      zoom: 20,\n    });\n\n    // Add OpenStreetMap tile layer\n    L.tileLayer('images/B2L2.png', {}).addTo(mapRef.current);\n\n    // Display GeoJSON data on the map\n    const geoJSONLayer = L.geoJSON(geojsonData, {\n      style: {\n        fillColor: 'blue',\n        color: 'black',\n        weight: 1,\n        fillOpacity: 0.3,\n      },\n      onEachFeature: (feature, layer) => {\n        layer.bindPopup(feature.properties.name);\n        layer.on('click', () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      },\n    });\n\n    geoJSONLayer.addTo(mapRef.current);\n\n    // Handle click on the map\n    mapRef.current.on('click', function (e) {\n      const clickedLatLng = e.latlng;\n      const clickedBuilding = geoJSONLayer.getLayers().find((layer) =>\n        layer.getBounds().contains(clickedLatLng)\n      );\n\n      if (clickedBuilding) {\n        const clickedBuildingName = clickedBuilding.feature.properties.name;\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n        setSelectedBuilding(null);\n      }\n    });\n\n    return () => {\n      mapRef.current.remove();\n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"map\" style={{ height: '500px' }}></div>\n      <div>\n        <h3>Selected Building:</h3>\n        <p>{selectedBuilding || 'No building selected'}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default GeoJSONMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
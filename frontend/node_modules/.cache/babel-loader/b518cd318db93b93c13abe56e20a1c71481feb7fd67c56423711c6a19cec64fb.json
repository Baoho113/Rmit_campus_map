{"ast":null,"code":"// import React, { useEffect, useState, useRef } from \"react\";\n// import L from \"leaflet\";\n// import \"leaflet/dist/leaflet.css\";\n// import geojsonFeature from \"./building_info/buildingCollection\";\n// import univLayer from \"./univLayer.json\";\n// import NavigationBar from \"./NavigationBar\"; // Import the NavigationBar component\n\n// const GeoJSONMap = () => {\n//   const [selectedBuilding, setSelectedBuilding] = useState(null);\n//   const [userLocation, setUserLocation] = useState(null);\n//   const mapRef = useRef(); //to store map object\n\n//   useEffect(() => {\n//     // Create a map and store it in the ref\n//     mapRef.current = L.map(\"map\", {\n//       center: [10.7298, 106.69451],\n//       zoom: 20,\n//     });\n\n//     // Add OpenStreetMap tile layer\n//     L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n//       attribution: \"© OpenStreetMap contributors\",\n//     }).addTo(mapRef.current);\n\n//     // Function to handle user's location\n//     const handleLocation = (location) => {\n//       const { latitude, longitude } = location.coords;\n//       setUserLocation([latitude, longitude]);\n\n//       // Add a marker for the user's location\n//       const userMarker = L.marker([latitude, longitude], {\n//         icon: L.icon({\n//           iconUrl: \"/images/person.png\",\n//           iconSize: [32, 32],\n//           iconAnchor: [16, 32],\n//           popupAnchor: [0, -32],\n//         }),\n//       }).addTo(mapRef.current);\n\n//       userMarker.bindPopup(\"Your Location\").openPopup();\n//     };\n\n//     // Get user's location using Geolocation API\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(handleLocation);\n//     } else {\n//       console.error(\"Geolocation is not supported by this browser.\");\n//     }\n//     // 사용자 위치 가져오는 함수\n//     const getUserLocation = () => {\n//       if (navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(handleLocation);\n//       } else {\n//         console.error(\"Geolocation is not supported by this browser.\");\n//       }\n//     };\n//     // Add university layer\n//     const univLayerGroup = L.geoJSON(univLayer, {\n//       style: {\n//         fillColor: \"yellow\",\n//         color: \"black\",\n//         weight: 1,\n//         fillOpacity: 0.2,\n//       },\n//       onEachFeature: (feature, layer) => {\n//         layer.on(\"click\", () => {\n//           const clickedBuildingName = feature.properties.name;\n//           setSelectedBuilding(clickedBuildingName);\n//         });\n//       },\n//     });\n\n//     univLayerGroup.addTo(mapRef.current);\n\n//     // Add building polygons\n//     const buildingPolygons = [];\n//     const layers = L.geoJSON(geojsonFeature, {\n//       style: {\n//         fillColor: \"blue\",\n//         color: \"white\",\n//         weight: 1,\n//         fillOpacity: 0.5,\n//       },\n//       onEachFeature: (feature, layer) => {\n//         layer.bindPopup(feature.properties.name);\n//         buildingPolygons.push(layer);\n//         layer.on(\"click\", () => {\n//           const clickedBuildingName = feature.properties.name;\n//           setSelectedBuilding(clickedBuildingName);\n//         });\n//       },\n//     });\n\n//     layers.addTo(mapRef.current);\n\n//     // Handle click on the map\n//     mapRef.current.on(\"click\", function (e) {\n//       const clickedLatLng = e.latlng;\n//       const clickedBuilding = buildingPolygons.find((layer) =>\n//         layer.getBounds().contains(clickedLatLng)\n//       );\n\n//       if (clickedBuilding) {\n//         const clickedBuildingName = clickedBuilding.feature.properties.name;\n//         clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n//         setSelectedBuilding(null);\n//       }\n//     });\n\n//     // Draw arrows between buildings\n//     buildingPolygons.forEach((sourceBuilding) => {\n//       buildingPolygons.forEach((targetBuilding) => {\n//         if (sourceBuilding !== targetBuilding) {\n//           const sourceLatLng = sourceBuilding.getBounds().getCenter();\n//           const targetLatLng = targetBuilding.getBounds().getCenter();\n\n//           L.polyline([sourceLatLng, targetLatLng], {\n//             color: \"red\",\n//           }).addTo(mapRef.current);\n//         }\n//       });\n//     });\n\n//     return () => {\n//       mapRef.current.remove();\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <NavigationBar handleDirection={handleDirection} />{\" \"}\n//       {/* Render the NavigationBar */}\n//       <div id=\"map\" style={{ height: \"500px\" }}></div>\n//       {userLocation && (\n//         <div className=\"navigation-bar\">\n//           <p>\n//             Your Location: {userLocation[0]}, {userLocation[1]}\n//           </p>\n//         </div>\n//       )}\n//       {selectedBuilding && (\n//         <div className=\"navigation-bar\">\n//           <button onClick={() => setSelectedBuilding(null)}>X</button>\n//           <h2>{selectedBuilding}</h2>\n//           <img src={`images/selectedBuilding.jpg`} alt={selectedBuilding} />\n//           <p>Description of {selectedBuilding}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default GeoJSONMap;","map":{"version":3,"names":[],"sources":["C:/Users/ga020/OneDrive/Desktop/　　/Building IT Systems/teamFolder/Rmit_campus_map/frontend/src/GeoJSONMap.js"],"sourcesContent":["// import React, { useEffect, useState, useRef } from \"react\";\n// import L from \"leaflet\";\n// import \"leaflet/dist/leaflet.css\";\n// import geojsonFeature from \"./building_info/buildingCollection\";\n// import univLayer from \"./univLayer.json\";\n// import NavigationBar from \"./NavigationBar\"; // Import the NavigationBar component\n\n// const GeoJSONMap = () => {\n//   const [selectedBuilding, setSelectedBuilding] = useState(null);\n//   const [userLocation, setUserLocation] = useState(null);\n//   const mapRef = useRef(); //to store map object\n\n//   useEffect(() => {\n//     // Create a map and store it in the ref\n//     mapRef.current = L.map(\"map\", {\n//       center: [10.7298, 106.69451],\n//       zoom: 20,\n//     });\n\n//     // Add OpenStreetMap tile layer\n//     L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n//       attribution: \"© OpenStreetMap contributors\",\n//     }).addTo(mapRef.current);\n\n//     // Function to handle user's location\n//     const handleLocation = (location) => {\n//       const { latitude, longitude } = location.coords;\n//       setUserLocation([latitude, longitude]);\n\n//       // Add a marker for the user's location\n//       const userMarker = L.marker([latitude, longitude], {\n//         icon: L.icon({\n//           iconUrl: \"/images/person.png\",\n//           iconSize: [32, 32],\n//           iconAnchor: [16, 32],\n//           popupAnchor: [0, -32],\n//         }),\n//       }).addTo(mapRef.current);\n\n//       userMarker.bindPopup(\"Your Location\").openPopup();\n//     };\n\n//     // Get user's location using Geolocation API\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(handleLocation);\n//     } else {\n//       console.error(\"Geolocation is not supported by this browser.\");\n//     }\n//     // 사용자 위치 가져오는 함수\n//     const getUserLocation = () => {\n//       if (navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(handleLocation);\n//       } else {\n//         console.error(\"Geolocation is not supported by this browser.\");\n//       }\n//     };\n//     // Add university layer\n//     const univLayerGroup = L.geoJSON(univLayer, {\n//       style: {\n//         fillColor: \"yellow\",\n//         color: \"black\",\n//         weight: 1,\n//         fillOpacity: 0.2,\n//       },\n//       onEachFeature: (feature, layer) => {\n//         layer.on(\"click\", () => {\n//           const clickedBuildingName = feature.properties.name;\n//           setSelectedBuilding(clickedBuildingName);\n//         });\n//       },\n//     });\n\n//     univLayerGroup.addTo(mapRef.current);\n\n//     // Add building polygons\n//     const buildingPolygons = [];\n//     const layers = L.geoJSON(geojsonFeature, {\n//       style: {\n//         fillColor: \"blue\",\n//         color: \"white\",\n//         weight: 1,\n//         fillOpacity: 0.5,\n//       },\n//       onEachFeature: (feature, layer) => {\n//         layer.bindPopup(feature.properties.name);\n//         buildingPolygons.push(layer);\n//         layer.on(\"click\", () => {\n//           const clickedBuildingName = feature.properties.name;\n//           setSelectedBuilding(clickedBuildingName);\n//         });\n//       },\n//     });\n\n//     layers.addTo(mapRef.current);\n\n//     // Handle click on the map\n//     mapRef.current.on(\"click\", function (e) {\n//       const clickedLatLng = e.latlng;\n//       const clickedBuilding = buildingPolygons.find((layer) =>\n//         layer.getBounds().contains(clickedLatLng)\n//       );\n\n//       if (clickedBuilding) {\n//         const clickedBuildingName = clickedBuilding.feature.properties.name;\n//         clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n//         setSelectedBuilding(null);\n//       }\n//     });\n\n//     // Draw arrows between buildings\n//     buildingPolygons.forEach((sourceBuilding) => {\n//       buildingPolygons.forEach((targetBuilding) => {\n//         if (sourceBuilding !== targetBuilding) {\n//           const sourceLatLng = sourceBuilding.getBounds().getCenter();\n//           const targetLatLng = targetBuilding.getBounds().getCenter();\n\n//           L.polyline([sourceLatLng, targetLatLng], {\n//             color: \"red\",\n//           }).addTo(mapRef.current);\n//         }\n//       });\n//     });\n\n//     return () => {\n//       mapRef.current.remove();\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <NavigationBar handleDirection={handleDirection} />{\" \"}\n//       {/* Render the NavigationBar */}\n//       <div id=\"map\" style={{ height: \"500px\" }}></div>\n//       {userLocation && (\n//         <div className=\"navigation-bar\">\n//           <p>\n//             Your Location: {userLocation[0]}, {userLocation[1]}\n//           </p>\n//         </div>\n//       )}\n//       {selectedBuilding && (\n//         <div className=\"navigation-bar\">\n//           <button onClick={() => setSelectedBuilding(null)}>X</button>\n//           <h2>{selectedBuilding}</h2>\n//           <img src={`images/selectedBuilding.jpg`} alt={selectedBuilding} />\n//           <p>Description of {selectedBuilding}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default GeoJSONMap;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
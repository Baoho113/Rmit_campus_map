{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ga020\\\\OneDrive\\\\Desktop\\\\\\u3000\\u3000\\\\Building IT Systems\\\\teamFolder\\\\Rmit_campus_map\\\\frontend\\\\src\\\\GeoJSONMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./building_info/buildingCollection\"; // 기존 geojson 파일 경로\nimport univLayer from \"./univLayer.json\"; // 새로운 geojson 파일 경로\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeoJSONMap = () => {\n  _s();\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n  useEffect(() => {\n    const map = L.map(\"map\", {\n      center: [10.7298, 106.69451],\n      zoom: 20\n    });\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: \"© OpenStreetMap contributors\"\n    }).addTo(map);\n    // 새로운 건물 레이어 추가\n    const univLayerGroup = L.geoJSON(univLayer, {\n      style: {\n        fillColor: \"yellow\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.2\n      },\n      onEachFeature: (feature, layer) => {\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      }\n    });\n    univLayerGroup.addTo(map);\n    // 기존 건물들을 저장할 배열 생성\n    const buildingPolygons = [];\n\n    // 각 Feature에 스타일 및 팝업 추가하여 지도에 표시\n    const layers = L.geoJSON(geojsonFeature, {\n      style: {\n        fillColor: \"blue\",\n        color: \"white\",\n        weight: 1,\n        fillOpacity: 0.5\n      },\n      onEachFeature: (feature, layer) => {\n        layer.bindPopup(feature.properties.name);\n        buildingPolygons.push(layer); // 기존 건물 레이어 추가\n\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      }\n    });\n    layers.addTo(map);\n\n    // 클릭 이벤트 처리\n    map.on(\"click\", function (e) {\n      const clickedLatLng = e.latlng;\n      const clickedBuilding = buildingPolygons.find(layer => layer.getBounds().contains(clickedLatLng));\n      if (clickedBuilding) {\n        const clickedBuildingName = clickedBuilding.feature.properties.name;\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n        setSelectedBuilding(null); // univLayer 클릭 시 네비게이션 바 닫기\n      }\n    });\n    return () => {\n      map.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: \"500px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), selectedBuilding && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedBuilding(null),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedBuilding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `images/${selectedBuilding}.jpg`,\n        alt: selectedBuilding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Description of \", selectedBuilding]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(GeoJSONMap, \"vfcqI9+8M29ENiVuv4axFnKwGUU=\");\n_c = GeoJSONMap;\nexport default GeoJSONMap;\nvar _c;\n$RefreshReg$(_c, \"GeoJSONMap\");","map":{"version":3,"names":["React","useEffect","useState","L","geojsonFeature","univLayer","jsxDEV","_jsxDEV","GeoJSONMap","_s","selectedBuilding","setSelectedBuilding","map","center","zoom","tileLayer","attribution","addTo","univLayerGroup","geoJSON","style","fillColor","color","weight","fillOpacity","onEachFeature","feature","layer","on","clickedBuildingName","properties","name","buildingPolygons","layers","bindPopup","push","e","clickedLatLng","latlng","clickedBuilding","find","getBounds","contains","openPopup","remove","children","id","height","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/ga020/OneDrive/Desktop/　　/Building IT Systems/teamFolder/Rmit_campus_map/frontend/src/GeoJSONMap.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport geojsonFeature from \"./building_info/buildingCollection\"; // 기존 geojson 파일 경로\r\nimport univLayer from \"./univLayer.json\"; // 새로운 geojson 파일 경로\r\n\r\nconst GeoJSONMap = () => {\r\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const map = L.map(\"map\", {\r\n      center: [10.7298, 106.69451],\r\n      zoom: 20,\r\n    });\r\n\r\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n      attribution: \"© OpenStreetMap contributors\",\r\n    }).addTo(map);\r\n    // 새로운 건물 레이어 추가\r\n    const univLayerGroup = L.geoJSON(univLayer, {\r\n      style: {\r\n        fillColor: \"yellow\",\r\n        color: \"black\",\r\n        weight: 1,\r\n        fillOpacity: 0.2,\r\n      },\r\n      onEachFeature: (feature, layer) => {\r\n        layer.on(\"click\", () => {\r\n          const clickedBuildingName = feature.properties.name;\r\n          setSelectedBuilding(clickedBuildingName);\r\n        });\r\n      },\r\n    });\r\n\r\n    univLayerGroup.addTo(map);\r\n    // 기존 건물들을 저장할 배열 생성\r\n    const buildingPolygons = [];\r\n\r\n    // 각 Feature에 스타일 및 팝업 추가하여 지도에 표시\r\n    const layers = L.geoJSON(geojsonFeature, {\r\n      style: {\r\n        fillColor: \"blue\",\r\n        color: \"white\",\r\n        weight: 1,\r\n        fillOpacity: 0.5,\r\n      },\r\n      onEachFeature: (feature, layer) => {\r\n        layer.bindPopup(feature.properties.name);\r\n        buildingPolygons.push(layer); // 기존 건물 레이어 추가\r\n\r\n        layer.on(\"click\", () => {\r\n          const clickedBuildingName = feature.properties.name;\r\n          setSelectedBuilding(clickedBuildingName);\r\n        });\r\n      },\r\n    });\r\n\r\n    layers.addTo(map);\r\n\r\n    // 클릭 이벤트 처리\r\n    map.on(\"click\", function (e) {\r\n      const clickedLatLng = e.latlng;\r\n      const clickedBuilding = buildingPolygons.find((layer) =>\r\n        layer.getBounds().contains(clickedLatLng)\r\n      );\r\n\r\n      if (clickedBuilding) {\r\n        const clickedBuildingName = clickedBuilding.feature.properties.name;\r\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\r\n        setSelectedBuilding(null); // univLayer 클릭 시 네비게이션 바 닫기\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      map.remove();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"map\" style={{ height: \"500px\" }}>\r\n        {/* 지도를 렌더링할 div 요소 */}\r\n      </div>\r\n      {selectedBuilding && (\r\n        <div className=\"navigation-bar\">\r\n          {/* 건물 정보를 보여주는 navigation bar */}\r\n          <button onClick={() => setSelectedBuilding(null)}>X</button>\r\n          <h2>{selectedBuilding}</h2>\r\n          {/* 건물 사진 및 설명 등을 표시하는 부분 */}\r\n          <img src={`images/${selectedBuilding}.jpg`} alt={selectedBuilding} />\r\n          <p>Description of {selectedBuilding}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeoJSONMap;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ga020\\\\OneDrive\\\\Desktop\\\\\\u3000\\u3000\\\\Building IT Systems\\\\teamFolder\\\\Rmit_campus_map\\\\frontend\\\\src\\\\GeoJSONMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./building_info/buildingCollection\";\nimport univLayer from \"./univLayer.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeoJSONMap = () => {\n  _s();\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n  const mapRef = useRef(); //to store map object\n\n  useEffect(() => {\n    // Create a map and store it in the ref\n    mapRef.current = L.map(\"map\", {\n      center: [10.7298, 106.69451],\n      zoom: 20\n    });\n\n    // Add OpenStreetMap tile layer\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: \"© OpenStreetMap contributors\"\n    }).addTo(mapRef.current);\n\n    // Function to handle user's location\n    const handleLocation = location => {\n      const {\n        latitude,\n        longitude\n      } = location.coords;\n      setUserLocation([latitude, longitude]);\n\n      // Add a marker for the user's location\n      const userMarker = L.marker([latitude, longitude], {\n        icon: L.icon({\n          iconUrl: \"/images/person.png\",\n          iconSize: [32, 32],\n          iconAnchor: [16, 32],\n          popupAnchor: [0, -32]\n        })\n      }).addTo(mapRef.current);\n      userMarker.bindPopup(\"Your Location\").openPopup();\n    };\n\n    // Get user's location using Geolocation API\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(handleLocation);\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n\n    // Add university layer\n    const univLayerGroup = L.geoJSON(univLayer, {\n      style: {\n        fillColor: \"yellow\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.2\n      },\n      onEachFeature: (feature, layer) => {\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      }\n    });\n    univLayerGroup.addTo(mapRef.current);\n\n    // Add building polygons\n    const buildingPolygons = [];\n    const layers = L.geoJSON(geojsonFeature, {\n      style: {\n        fillColor: \"blue\",\n        color: \"white\",\n        weight: 1,\n        fillOpacity: 0.5\n      },\n      onEachFeature: (feature, layer) => {\n        layer.bindPopup(feature.properties.name);\n        buildingPolygons.push(layer);\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      }\n    });\n    layers.addTo(mapRef.current);\n\n    // Handle click on the map\n    mapRef.current.on(\"click\", function (e) {\n      const clickedLatLng = e.latlng;\n      const clickedBuilding = buildingPolygons.find(layer => layer.getBounds().contains(clickedLatLng));\n      if (clickedBuilding) {\n        const clickedBuildingName = clickedBuilding.feature.properties.name;\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n        setSelectedBuilding(null);\n      }\n    });\n\n    // Draw arrows between buildings\n    buildingPolygons.forEach(sourceBuilding => {\n      buildingPolygons.forEach(targetBuilding => {\n        if (sourceBuilding !== targetBuilding) {\n          const sourceLatLng = sourceBuilding.getBounds().getCenter();\n          const targetLatLng = targetBuilding.getBounds().getCenter();\n          L.polyline([sourceLatLng, targetLatLng], {\n            color: \"red\"\n          }).addTo(mapRef.current);\n        }\n      });\n    });\n    return () => {\n      mapRef.current.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: \"500px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), userLocation && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your Location: \", userLocation[0], \", \", userLocation[1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this), selectedBuilding && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedBuilding(null),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedBuilding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `images/selectedBuilding.jpg`,\n        alt: selectedBuilding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Description of \", selectedBuilding]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(GeoJSONMap, \"tVMtl+fJLZlVIU/z3oHM4wC5P4M=\");\n_c = GeoJSONMap;\nexport default GeoJSONMap;\nvar _c;\n$RefreshReg$(_c, \"GeoJSONMap\");","map":{"version":3,"names":["React","useEffect","useState","useRef","L","geojsonFeature","univLayer","jsxDEV","_jsxDEV","GeoJSONMap","_s","selectedBuilding","setSelectedBuilding","userLocation","setUserLocation","mapRef","current","map","center","zoom","tileLayer","attribution","addTo","handleLocation","location","latitude","longitude","coords","userMarker","marker","icon","iconUrl","iconSize","iconAnchor","popupAnchor","bindPopup","openPopup","navigator","geolocation","getCurrentPosition","console","error","univLayerGroup","geoJSON","style","fillColor","color","weight","fillOpacity","onEachFeature","feature","layer","on","clickedBuildingName","properties","name","buildingPolygons","layers","push","e","clickedLatLng","latlng","clickedBuilding","find","getBounds","contains","forEach","sourceBuilding","targetBuilding","sourceLatLng","getCenter","targetLatLng","polyline","remove","children","id","height","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/ga020/OneDrive/Desktop/　　/Building IT Systems/teamFolder/Rmit_campus_map/frontend/src/GeoJSONMap.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./building_info/buildingCollection\";\nimport univLayer from \"./univLayer.json\";\n\nconst GeoJSONMap = () => {\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n  const mapRef = useRef(); //to store map object\n\n  useEffect(() => {\n    // Create a map and store it in the ref\n    mapRef.current = L.map(\"map\", {\n      center: [10.7298, 106.69451],\n      zoom: 20,\n    });\n    \n    // Add OpenStreetMap tile layer\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: \"© OpenStreetMap contributors\",\n    }).addTo(mapRef.current);\n\n    // Function to handle user's location\n    const handleLocation = (location) => {\n      const { latitude, longitude } = location.coords;\n      setUserLocation([latitude, longitude]);\n\n\n      // Add a marker for the user's location\n      const userMarker = L.marker([latitude, longitude], {\n        icon: L.icon({\n          iconUrl: \"/images/person.png\",\n          iconSize: [32, 32],\n          iconAnchor: [16, 32],\n          popupAnchor: [0, -32],\n        }),\n      }).addTo(mapRef.current);\n\n      userMarker.bindPopup(\"Your Location\").openPopup();\n    };\n\n    // Get user's location using Geolocation API\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(handleLocation);\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n    \n    // Add university layer\n    const univLayerGroup = L.geoJSON(univLayer, {\n      style: {\n        fillColor: \"yellow\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.2,\n      },\n      onEachFeature: (feature, layer) => {\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      },\n    });\n\n    univLayerGroup.addTo(mapRef.current);\n\n    // Add building polygons\n    const buildingPolygons = [];\n    const layers = L.geoJSON(geojsonFeature, {\n      style: {\n        fillColor: \"blue\",\n        color: \"white\",\n        weight: 1,\n        fillOpacity: 0.5,\n      },\n      onEachFeature: (feature, layer) => {\n        layer.bindPopup(feature.properties.name);\n        buildingPolygons.push(layer);\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      },\n    });\n\n    layers.addTo(mapRef.current);\n\n    // Handle click on the map\n    mapRef.current.on(\"click\", function (e) {\n      const clickedLatLng = e.latlng;\n      const clickedBuilding = buildingPolygons.find((layer) =>\n        layer.getBounds().contains(clickedLatLng)\n      );\n\n      if (clickedBuilding) {\n        const clickedBuildingName = clickedBuilding.feature.properties.name;\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n        setSelectedBuilding(null);\n      }\n    });\n\n    // Draw arrows between buildings\n    buildingPolygons.forEach((sourceBuilding) => {\n      buildingPolygons.forEach((targetBuilding) => {\n        if (sourceBuilding !== targetBuilding) {\n          const sourceLatLng = sourceBuilding.getBounds().getCenter();\n          const targetLatLng = targetBuilding.getBounds().getCenter();\n\n          L.polyline([sourceLatLng, targetLatLng], {\n            color: \"red\",\n          }).addTo(mapRef.current);\n        }\n      });\n    });\n\n    return () => {\n      mapRef.current.remove();\n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"map\" style={{ height: \"500px\" }}></div>\n      {userLocation && (\n        <div className=\"navigation-bar\">\n          <p>\n            Your Location: {userLocation[0]}, {userLocation[1]}\n          </p>\n        </div>\n      )}\n      {selectedBuilding && (\n        <div className=\"navigation-bar\">\n          <button onClick={() => setSelectedBuilding(null)}>X</button>\n          <h2>{selectedBuilding}</h2>\n          <img src={`images/selectedBuilding.jpg`} alt={selectedBuilding} />\n          <p>Description of {selectedBuilding}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GeoJSONMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
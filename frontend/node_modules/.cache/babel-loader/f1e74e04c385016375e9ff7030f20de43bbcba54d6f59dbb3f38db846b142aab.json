{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\young\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\Rmit_campus_map\\\\frontend\\\\src\\\\GeoJSONMap.js\",\n  _s = $RefreshSig$();\n// GeoJSONMap.js\nimport React, { useEffect, useState, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./building_info/buildingCollection\";\nimport univLayer from \"./univLayer.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GeoJSONMap() {\n  _s();\n  const mapRef = useRef(null);\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n  useEffect(() => {\n    if (!mapRef.current) {\n      mapRef.current = L.map(\"geojson-map\", {\n        center: [10.7298, 106.69451],\n        zoom: 20\n      });\n      L.tileLayer(\"images/B2L2.png\", {}).addTo(mapRef.current);\n      const univLayerGroup = L.geoJSON(univLayer, {\n        style: {\n          fillColor: \"yellow\",\n          color: \"black\",\n          weight: 1,\n          fillOpacity: 0.2\n        },\n        onEachFeature: (feature, layer) => {\n          layer.on(\"click\", () => {\n            const clickedBuildingName = feature.properties.name;\n            setSelectedBuilding(clickedBuildingName);\n          });\n        }\n      });\n      univLayerGroup.addTo(mapRef.current);\n      const buildingPolygons = [];\n      const layers = L.geoJSON(geojsonFeature, {\n        style: {\n          fillColor: \"blue\",\n          color: \"black\",\n          weight: 1,\n          fillOpacity: 0.3\n        },\n        onEachFeature: (feature, layer) => {\n          layer.bindPopup(feature.properties.name);\n          buildingPolygons.push(layer);\n          layer.on(\"click\", () => {\n            const clickedBuildingName = feature.properties.name;\n            setSelectedBuilding(clickedBuildingName);\n          });\n        }\n      });\n      layers.addTo(mapRef.current);\n      mapRef.current.on(\"click\", function (e) {\n        const clickedLatLng = e.latlng;\n        const clickedBuilding = buildingPolygons.find(layer => layer.getBounds().contains(clickedLatLng));\n        if (clickedBuilding) {\n          const clickedBuildingName = clickedBuilding.feature.properties.name;\n          clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n          setSelectedBuilding(null);\n        }\n      });\n    }\n    return () => {\n      if (mapRef.current) {\n        mapRef.current.remove();\n        mapRef.current = null;\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"geojson-map\",\n      style: {\n        height: \"500px\",\n        position: \"relative\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"images/B2L2.png\",\n        alt: \"Campus Map\",\n        style: {\n          width: \"100%\",\n          height: \"100%\",\n          objectFit: \"cover\",\n          position: \"absolute\",\n          top: 0,\n          left: 0\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Building:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: selectedBuilding || \"No building selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(GeoJSONMap, \"V3hjMIBLyuoILHYHgEDaNGgUMq0=\");\n_c = GeoJSONMap;\nexport default GeoJSONMap;\nvar _c;\n$RefreshReg$(_c, \"GeoJSONMap\");","map":{"version":3,"names":["React","useEffect","useState","useRef","L","geojsonFeature","univLayer","jsxDEV","_jsxDEV","GeoJSONMap","_s","mapRef","selectedBuilding","setSelectedBuilding","current","map","center","zoom","tileLayer","addTo","univLayerGroup","geoJSON","style","fillColor","color","weight","fillOpacity","onEachFeature","feature","layer","on","clickedBuildingName","properties","name","buildingPolygons","layers","bindPopup","push","e","clickedLatLng","latlng","clickedBuilding","find","getBounds","contains","openPopup","remove","children","id","height","position","src","alt","width","objectFit","top","left","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/young/OneDrive/바탕 화면/Rmit_campus_map/frontend/src/GeoJSONMap.js"],"sourcesContent":["// GeoJSONMap.js\nimport React, { useEffect, useState, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./building_info/buildingCollection\";\nimport univLayer from \"./univLayer.json\";\n\nfunction GeoJSONMap() {\n  const mapRef = useRef(null);\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n\n  useEffect(() => {\n    if (!mapRef.current) {\n      mapRef.current = L.map(\"geojson-map\", {\n        center: [10.7298, 106.69451],\n        zoom: 20,\n      });\n\n      L.tileLayer(\"images/B2L2.png\", {}).addTo(mapRef.current);\n\n      const univLayerGroup = L.geoJSON(univLayer, {\n        style: {\n          fillColor: \"yellow\",\n          color: \"black\",\n          weight: 1,\n          fillOpacity: 0.2,\n        },\n        onEachFeature: (feature, layer) => {\n          layer.on(\"click\", () => {\n            const clickedBuildingName = feature.properties.name;\n            setSelectedBuilding(clickedBuildingName);\n          });\n        },\n      });\n\n      univLayerGroup.addTo(mapRef.current);\n\n      const buildingPolygons = [];\n      const layers = L.geoJSON(geojsonFeature, {\n        style: {\n          fillColor: \"blue\",\n          color: \"black\",\n          weight: 1,\n          fillOpacity: 0.3,\n        },\n        onEachFeature: (feature, layer) => {\n          layer.bindPopup(feature.properties.name);\n          buildingPolygons.push(layer);\n          layer.on(\"click\", () => {\n            const clickedBuildingName = feature.properties.name;\n            setSelectedBuilding(clickedBuildingName);\n          });\n        },\n      });\n\n      layers.addTo(mapRef.current);\n\n      mapRef.current.on(\"click\", function (e) {\n        const clickedLatLng = e.latlng;\n        const clickedBuilding = buildingPolygons.find((layer) =>\n          layer.getBounds().contains(clickedLatLng)\n        );\n\n        if (clickedBuilding) {\n          const clickedBuildingName = clickedBuilding.feature.properties.name;\n          clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n          setSelectedBuilding(null);\n        }\n      });\n    }\n\n    return () => {\n      if (mapRef.current) {\n        mapRef.current.remove();\n        mapRef.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"geojson-map\" style={{ height: \"500px\", position: \"relative\" }}>\n        <img\n          src=\"images/B2L2.png\"\n          alt=\"Campus Map\"\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            objectFit: \"cover\",\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n          }}\n        />\n      </div>\n      <div>\n        <h3>Selected Building:</h3>\n        <p>{selectedBuilding || \"No building selected\"}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default GeoJSONMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React, { useEffect, useState, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./building_info/buildingCollection\";\nimport univLayer from \"./univLayer.json\";\nuseEffect(() => {\n  // Create a map and store it in the ref\n  mapRef.current = L.map(\"map\", {\n    center: [10.7298, 106.69451],\n    zoom: 20\n  });\n\n  // Add OpenStreetMap tile layer\n  L.tileLayer(\"images/B2L2.png\", {}).addTo(mapRef.current);\n\n  // Add university layer\n  const univLayerGroup = L.geoJSON(univLayer, {\n    style: {\n      fillColor: \"yellow\",\n      color: \"black\",\n      weight: 1,\n      fillOpacity: 0.2\n    },\n    onEachFeature: (feature, layer) => {\n      layer.on(\"click\", () => {\n        const clickedBuildingName = feature.properties.name;\n        setSelectedBuilding(clickedBuildingName);\n      });\n    }\n  });\n  univLayerGroup.addTo(mapRef.current);\n\n  // Add building polygons\n  const buildingPolygons = [];\n  const layers = L.geoJSON(geojsonFeature, {\n    style: {\n      fillColor: \"blue\",\n      color: \"black\",\n      weight: 1,\n      fillOpacity: 0.3\n    },\n    onEachFeature: (feature, layer) => {\n      layer.bindPopup(feature.properties.name);\n      buildingPolygons.push(layer);\n      layer.on(\"click\", () => {\n        const clickedBuildingName = feature.properties.name;\n        setSelectedBuilding(clickedBuildingName);\n      });\n    }\n  });\n  layers.addTo(mapRef.current);\n\n  // Handle click on the map\n  mapRef.current.on(\"click\", function (e) {\n    const clickedLatLng = e.latlng;\n    const clickedBuilding = buildingPolygons.find(layer => layer.getBounds().contains(clickedLatLng));\n    if (clickedBuilding) {\n      const clickedBuildingName = clickedBuilding.feature.properties.name;\n      clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n      setSelectedBuilding(null);\n    }\n  });\n  return () => {\n    mapRef.current.remove();\n  };\n}, []);\nexport default GeoJSONMap;","map":{"version":3,"names":["React","useEffect","useState","useRef","L","geojsonFeature","univLayer","mapRef","current","map","center","zoom","tileLayer","addTo","univLayerGroup","geoJSON","style","fillColor","color","weight","fillOpacity","onEachFeature","feature","layer","on","clickedBuildingName","properties","name","setSelectedBuilding","buildingPolygons","layers","bindPopup","push","e","clickedLatLng","latlng","clickedBuilding","find","getBounds","contains","openPopup","remove","GeoJSONMap"],"sources":["C:/Users/young/OneDrive/바탕 화면/Rmit_campus_map/frontend/src/GeoJSONMap.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./building_info/buildingCollection\";\nimport univLayer from \"./univLayer.json\";\n\n\n  useEffect(() => {\n    // Create a map and store it in the ref\n    mapRef.current = L.map(\"map\", {\n      center: [10.7298, 106.69451],\n      zoom: 20,\n    });\n\n    // Add OpenStreetMap tile layer\n    L.tileLayer(\"images/B2L2.png\", {\n    }).addTo(mapRef.current);\n\n   \n    // Add university layer\n    const univLayerGroup = L.geoJSON(univLayer, {\n      style: {\n        fillColor: \"yellow\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.2,\n      },\n      onEachFeature: (feature, layer) => {\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      },\n    });\n\n    univLayerGroup.addTo(mapRef.current);\n\n    // Add building polygons\n    const buildingPolygons = [];\n    const layers = L.geoJSON(geojsonFeature, {\n      style: {\n        fillColor: \"blue\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.3,\n      },\n      onEachFeature: (feature, layer) => {\n        layer.bindPopup(feature.properties.name);\n        buildingPolygons.push(layer);\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      },\n    });\n\n    layers.addTo(mapRef.current);\n\n    // Handle click on the map\n    mapRef.current.on(\"click\", function (e) {\n      const clickedLatLng = e.latlng;\n      const clickedBuilding = buildingPolygons.find((layer) =>\n        layer.getBounds().contains(clickedLatLng)\n      );\n\n      if (clickedBuilding) {\n        const clickedBuildingName = clickedBuilding.feature.properties.name;\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n        setSelectedBuilding(null);\n      }\n    });\n\n    return () => {\n      mapRef.current.remove();\n    };\n  }, []);\n\n\nexport default GeoJSONMap;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B;AACjC,OAAOC,cAAc,MAAM,oCAAoC;AAC/D,OAAOC,SAAS,MAAM,kBAAkB;AAGtCL,SAAS,CAAC,MAAM;EACd;EACAM,MAAM,CAACC,OAAO,GAAGJ,CAAC,CAACK,GAAG,CAAC,KAAK,EAAE;IAC5BC,MAAM,EAAE,CAAC,OAAO,EAAE,SAAS,CAAC;IAC5BC,IAAI,EAAE;EACR,CAAC,CAAC;;EAEF;EACAP,CAAC,CAACQ,SAAS,CAAC,iBAAiB,EAAE,CAC/B,CAAC,CAAC,CAACC,KAAK,CAACN,MAAM,CAACC,OAAO,CAAC;;EAGxB;EACA,MAAMM,cAAc,GAAGV,CAAC,CAACW,OAAO,CAACT,SAAS,EAAE;IAC1CU,KAAK,EAAE;MACLC,SAAS,EAAE,QAAQ;MACnBC,KAAK,EAAE,OAAO;MACdC,MAAM,EAAE,CAAC;MACTC,WAAW,EAAE;IACf,CAAC;IACDC,aAAa,EAAEA,CAACC,OAAO,EAAEC,KAAK,KAAK;MACjCA,KAAK,CAACC,EAAE,CAAC,OAAO,EAAE,MAAM;QACtB,MAAMC,mBAAmB,GAAGH,OAAO,CAACI,UAAU,CAACC,IAAI;QACnDC,mBAAmB,CAACH,mBAAmB,CAAC;MAC1C,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEFX,cAAc,CAACD,KAAK,CAACN,MAAM,CAACC,OAAO,CAAC;;EAEpC;EACA,MAAMqB,gBAAgB,GAAG,EAAE;EAC3B,MAAMC,MAAM,GAAG1B,CAAC,CAACW,OAAO,CAACV,cAAc,EAAE;IACvCW,KAAK,EAAE;MACLC,SAAS,EAAE,MAAM;MACjBC,KAAK,EAAE,OAAO;MACdC,MAAM,EAAE,CAAC;MACTC,WAAW,EAAE;IACf,CAAC;IACDC,aAAa,EAAEA,CAACC,OAAO,EAAEC,KAAK,KAAK;MACjCA,KAAK,CAACQ,SAAS,CAACT,OAAO,CAACI,UAAU,CAACC,IAAI,CAAC;MACxCE,gBAAgB,CAACG,IAAI,CAACT,KAAK,CAAC;MAC5BA,KAAK,CAACC,EAAE,CAAC,OAAO,EAAE,MAAM;QACtB,MAAMC,mBAAmB,GAAGH,OAAO,CAACI,UAAU,CAACC,IAAI;QACnDC,mBAAmB,CAACH,mBAAmB,CAAC;MAC1C,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEFK,MAAM,CAACjB,KAAK,CAACN,MAAM,CAACC,OAAO,CAAC;;EAE5B;EACAD,MAAM,CAACC,OAAO,CAACgB,EAAE,CAAC,OAAO,EAAE,UAAUS,CAAC,EAAE;IACtC,MAAMC,aAAa,GAAGD,CAAC,CAACE,MAAM;IAC9B,MAAMC,eAAe,GAAGP,gBAAgB,CAACQ,IAAI,CAAEd,KAAK,IAClDA,KAAK,CAACe,SAAS,CAAC,CAAC,CAACC,QAAQ,CAACL,aAAa,CAC1C,CAAC;IAED,IAAIE,eAAe,EAAE;MACnB,MAAMX,mBAAmB,GAAGW,eAAe,CAACd,OAAO,CAACI,UAAU,CAACC,IAAI;MACnES,eAAe,CAACL,SAAS,CAACN,mBAAmB,CAAC,CAACe,SAAS,CAAC,CAAC;MAC1DZ,mBAAmB,CAAC,IAAI,CAAC;IAC3B;EACF,CAAC,CAAC;EAEF,OAAO,MAAM;IACXrB,MAAM,CAACC,OAAO,CAACiC,MAAM,CAAC,CAAC;EACzB,CAAC;AACH,CAAC,EAAE,EAAE,CAAC;AAGR,eAAeC,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}
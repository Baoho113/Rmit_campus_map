{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ga020\\\\OneDrive\\\\Desktop\\\\\\u3000\\u3000\\\\Building IT Systems\\\\frontend\\\\src\\\\GeoJSONMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./drawn_shape.json\"; // 기존 geojson 파일 경로\nimport univLayer from \"./univLayer.json\"; // 새로운 geojson 파일 경로\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeoJSONMap = () => {\n  _s();\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n  useEffect(() => {\n    const map = L.map(\"map\", {\n      center: [10.7298, 106.69451],\n      zoom: 20\n    });\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: \"© OpenStreetMap contributors\"\n    }).addTo(map);\n\n    // 기존 건물들을 저장할 배열 생성\n    const buildingPolygons = [];\n\n    // 각 Feature에 스타일 및 팝업 추가하여 지도에 표시\n    const layers = L.geoJSON(geojsonFeature, {\n      style: {\n        fillColor: \"blue\",\n        color: \"white\",\n        weight: 1,\n        fillOpacity: 0.5\n      },\n      onEachFeature: (feature, layer) => {\n        layer.bindPopup(feature.properties.name);\n        buildingPolygons.push(layer); // 기존 건물 레이어 추가\n      }\n    });\n    layers.addTo(map);\n\n    // 새로운 건물 레이어 추가\n    const univLayerGroup = L.geoJSON(univLayer, {\n      style: {\n        fillColor: \"yellow\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.2\n      },\n      onEachFeature: (feature, layer) => {\n        layer.on(\"click\", () => {\n          const clickedBuildingDescription = feature.properties.description;\n          setSelectedBuilding(clickedBuildingDescription);\n        });\n      }\n    });\n    univLayerGroup.addTo(map);\n\n    // 클릭 이벤트 처리\n    map.on(\"click\", function (e) {\n      const clickedLatLng = e.latlng;\n      const clickedBuilding = buildingPolygons.find(layer => layer.getBounds().contains(clickedLatLng));\n      if (clickedBuilding) {\n        const clickedBuildingName = clickedBuilding.feature.properties.name;\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n      }\n    });\n    return () => {\n      map.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: \"500px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(GeoJSONMap, \"vfcqI9+8M29ENiVuv4axFnKwGUU=\");\n_c = GeoJSONMap;\nexport default GeoJSONMap;\nvar _c;\n$RefreshReg$(_c, \"GeoJSONMap\");","map":{"version":3,"names":["React","useEffect","useState","L","geojsonFeature","univLayer","jsxDEV","_jsxDEV","GeoJSONMap","_s","selectedBuilding","setSelectedBuilding","map","center","zoom","tileLayer","attribution","addTo","buildingPolygons","layers","geoJSON","style","fillColor","color","weight","fillOpacity","onEachFeature","feature","layer","bindPopup","properties","name","push","univLayerGroup","on","clickedBuildingDescription","description","e","clickedLatLng","latlng","clickedBuilding","find","getBounds","contains","clickedBuildingName","openPopup","remove","children","id","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ga020/OneDrive/Desktop/　　/Building IT Systems/frontend/src/GeoJSONMap.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport geojsonFeature from \"./drawn_shape.json\"; // 기존 geojson 파일 경로\r\nimport univLayer from \"./univLayer.json\"; // 새로운 geojson 파일 경로\r\n\r\nconst GeoJSONMap = () => {\r\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const map = L.map(\"map\", {\r\n      center: [10.7298, 106.69451],\r\n      zoom: 20,\r\n    });\r\n\r\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n      attribution: \"© OpenStreetMap contributors\",\r\n    }).addTo(map);\r\n\r\n    // 기존 건물들을 저장할 배열 생성\r\n    const buildingPolygons = [];\r\n\r\n    // 각 Feature에 스타일 및 팝업 추가하여 지도에 표시\r\n    const layers = L.geoJSON(geojsonFeature, {\r\n      style: {\r\n        fillColor: \"blue\",\r\n        color: \"white\",\r\n        weight: 1,\r\n        fillOpacity: 0.5,\r\n      },\r\n      onEachFeature: (feature, layer) => {\r\n        layer.bindPopup(feature.properties.name);\r\n        buildingPolygons.push(layer); // 기존 건물 레이어 추가\r\n      },\r\n    });\r\n\r\n    layers.addTo(map);\r\n\r\n    // 새로운 건물 레이어 추가\r\n    const univLayerGroup = L.geoJSON(univLayer, {\r\n      style: {\r\n        fillColor: \"yellow\",\r\n        color: \"black\",\r\n        weight: 1,\r\n        fillOpacity: 0.2,\r\n      },\r\n      onEachFeature: (feature, layer) => {\r\n        layer.on(\"click\", () => {\r\n          const clickedBuildingDescription = feature.properties.description;\r\n          setSelectedBuilding(clickedBuildingDescription);\r\n        });\r\n      },\r\n    });\r\n\r\n    univLayerGroup.addTo(map);\r\n\r\n    // 클릭 이벤트 처리\r\n    map.on(\"click\", function (e) {\r\n      const clickedLatLng = e.latlng;\r\n      const clickedBuilding = buildingPolygons.find((layer) =>\r\n        layer.getBounds().contains(clickedLatLng)\r\n      );\r\n\r\n      if (clickedBuilding) {\r\n        const clickedBuildingName = clickedBuilding.feature.properties.name;\r\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      map.remove();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"map\" style={{ height: \"500px\" }}>\r\n        {/* 지도를 렌더링할 div 요소 */}\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeoJSONMap;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
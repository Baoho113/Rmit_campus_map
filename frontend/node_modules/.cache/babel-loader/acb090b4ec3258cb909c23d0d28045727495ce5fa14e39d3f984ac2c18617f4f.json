{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\young\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\Rmit_campus_map\\\\frontend\\\\src\\\\GeoJSONMap.js\",\n  _s = $RefreshSig$();\n// GeoJSONMap.js\nimport React, { useEffect, useState, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport geojsonFeature from \"./building_info/buildingCollection\";\nimport univLayer from \"./univLayer.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GeoJSONMap() {\n  _s();\n  const mapRef = useRef(null);\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n  useEffect(() => {\n    if (!mapRef.current) {\n      mapRef.current = L.map(\"geojson-map\", {\n        center: [10.7298, 106.69451],\n        zoom: 20,\n        drawControlTooltips: true\n      });\n      L.tileLayer(\"images/B2L2.png\", {}).addTo(mapRef.current);\n      const univLayerGroup = L.geoJSON(univLayer, {\n        style: {\n          fillColor: \"yellow\",\n          color: \"black\",\n          weight: 1,\n          fillOpacity: 0.2\n        },\n        onEachFeature: (feature, layer) => {\n          layer.on(\"click\", () => {\n            const clickedBuildingName = feature.properties.name;\n            setSelectedBuilding(clickedBuildingName);\n          });\n        }\n      });\n      univLayerGroup.addTo(mapRef.current);\n      const drawnItems = new L.FeatureGroup();\n      mapRef.current.addLayer(drawnItems);\n      const drawControl = new L.Control.Draw({\n        edit: {\n          featureGroup: drawnItems\n        },\n        draw: {\n          polygon: true,\n          polyline: false,\n          circle: false,\n          marker: false,\n          circlemarker: false,\n          rectangle: false\n        }\n      });\n      mapRef.current.addControl(drawControl);\n      const buildingPolygons = [];\n      const layers = L.geoJSON(geojsonFeature, {\n        style: {\n          fillColor: \"blue\",\n          color: \"black\",\n          weight: 1,\n          fillOpacity: 0.3\n        },\n        onEachFeature: (feature, layer) => {\n          layer.bindPopup(feature.properties.name);\n          buildingPolygons.push(layer);\n          layer.on(\"click\", () => {\n            const clickedBuildingName = feature.properties.name;\n            setSelectedBuilding(clickedBuildingName);\n          });\n        }\n      });\n      layers.addTo(mapRef.current);\n      mapRef.current.on(\"click\", function (e) {\n        const clickedLatLng = e.latlng;\n        const clickedBuilding = buildingPolygons.find(layer => layer.getBounds().contains(clickedLatLng));\n        if (clickedBuilding) {\n          const clickedBuildingName = clickedBuilding.feature.properties.name;\n          clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n          setSelectedBuilding(null);\n        }\n      });\n    }\n    return () => {\n      if (mapRef.current) {\n        mapRef.current.remove();\n        mapRef.current = null;\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"geojson-map\",\n      style: {\n        height: \"500px\",\n        position: \"relative\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Building:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: selectedBuilding || \"No building selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(GeoJSONMap, \"V3hjMIBLyuoILHYHgEDaNGgUMq0=\");\n_c = GeoJSONMap;\nexport default GeoJSONMap;\nvar _c;\n$RefreshReg$(_c, \"GeoJSONMap\");","map":{"version":3,"names":["React","useEffect","useState","useRef","L","geojsonFeature","univLayer","jsxDEV","_jsxDEV","GeoJSONMap","_s","mapRef","selectedBuilding","setSelectedBuilding","current","map","center","zoom","drawControlTooltips","tileLayer","addTo","univLayerGroup","geoJSON","style","fillColor","color","weight","fillOpacity","onEachFeature","feature","layer","on","clickedBuildingName","properties","name","drawnItems","FeatureGroup","addLayer","drawControl","Control","Draw","edit","featureGroup","draw","polygon","polyline","circle","marker","circlemarker","rectangle","addControl","buildingPolygons","layers","bindPopup","push","e","clickedLatLng","latlng","clickedBuilding","find","getBounds","contains","openPopup","remove","children","id","height","position","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/young/OneDrive/바탕 화면/Rmit_campus_map/frontend/src/GeoJSONMap.js"],"sourcesContent":["// GeoJSONMap.js\nimport React, { useEffect, useState, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport geojsonFeature from \"./building_info/buildingCollection\";\nimport univLayer from \"./univLayer.json\";\n\nfunction GeoJSONMap() {\n  const mapRef = useRef(null);\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n\n  useEffect(() => {\n    if (!mapRef.current) {\n      mapRef.current = L.map(\"geojson-map\", {\n        center: [10.7298, 106.69451],\n        zoom: 20,\n        drawControlTooltips: true,\n      });\n\n      L.tileLayer(\"images/B2L2.png\", {}).addTo(mapRef.current);\n\n      const univLayerGroup = L.geoJSON(univLayer, {\n        style: {\n          fillColor: \"yellow\",\n          color: \"black\",\n          weight: 1,\n          fillOpacity: 0.2,\n        },\n        onEachFeature: (feature, layer) => {\n          layer.on(\"click\", () => {\n            const clickedBuildingName = feature.properties.name;\n            setSelectedBuilding(clickedBuildingName);\n          });\n        },\n      });\n\n      univLayerGroup.addTo(mapRef.current);\n\n      const drawnItems = new L.FeatureGroup();\n      mapRef.current.addLayer(drawnItems);\n\n      const drawControl = new L.Control.Draw({\n        edit: {\n          featureGroup: drawnItems,\n        },\n        draw: {\n          polygon: true,\n          polyline: false,\n          circle: false,\n          marker: false,\n          circlemarker: false,\n          rectangle: false,\n        },\n      });\n      mapRef.current.addControl(drawControl);\n\n      const buildingPolygons = [];\n      const layers = L.geoJSON(geojsonFeature, {\n        style: {\n          fillColor: \"blue\",\n          color: \"black\",\n          weight: 1,\n          fillOpacity: 0.3,\n        },\n        onEachFeature: (feature, layer) => {\n          layer.bindPopup(feature.properties.name);\n          buildingPolygons.push(layer);\n          layer.on(\"click\", () => {\n            const clickedBuildingName = feature.properties.name;\n            setSelectedBuilding(clickedBuildingName);\n          });\n        },\n      });\n\n      layers.addTo(mapRef.current);\n\n      mapRef.current.on(\"click\", function (e) {\n        const clickedLatLng = e.latlng;\n        const clickedBuilding = buildingPolygons.find((layer) =>\n          layer.getBounds().contains(clickedLatLng)\n        );\n\n        if (clickedBuilding) {\n          const clickedBuildingName = clickedBuilding.feature.properties.name;\n          clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n          setSelectedBuilding(null);\n        }\n      });\n    }\n\n    return () => {\n      if (mapRef.current) {\n        mapRef.current.remove();\n        mapRef.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"geojson-map\" style={{ height: \"500px\", position: \"relative\" }}></div>\n      <div>\n        <h3>Selected Building:</h3>\n        <p>{selectedBuilding || \"No building selected\"}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default GeoJSONMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
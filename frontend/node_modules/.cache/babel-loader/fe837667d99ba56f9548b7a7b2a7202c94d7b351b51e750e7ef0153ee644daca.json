{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ga020\\\\OneDrive\\\\Desktop\\\\\\u3000\\u3000\\\\Building IT Systems\\\\frontend\\\\src\\\\GeoJSONMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./drawn_shape.json\"; // geojson 파일 경로\nimport leafletPip from \"leaflet-pip\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeoJSONMap = () => {\n  _s();\n  useEffect(() => {\n    const map = L.map(\"map\").setView([10.7298, 106.69451], 20);\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: \"© OpenStreetMap contributors\"\n    }).addTo(map);\n\n    // L.geoJSON(geojsonFeature, {\n    //     onEachFeature: (feature, layer) => {\n    //         const name = feature.properties.name;\n    //         layer.bindPopup(name);\n    //     }\n    // }).addTo(map);\n\n    // 다각형을 저장할 배열 생성\n    const buildingPolygons = [];\n\n    // 각 Feature에 스타일 및 팝업 추가하여 지도에 표시\n    L.geoJSON(geojsonFeature, {\n      onEachFeature: (feature, layer) => {\n        const name = feature.properties.name;\n        layer.bindPopup(name);\n        if (name !== \"building 7\") {\n          // building 7이 아닌 다른 건물일 경우 배열에 추가\n          buildingPolygons.push(layer);\n        }\n      }\n    }).addTo(map);\n\n    // // building 7 건물 추가\n    // const building7Layer = buildingPolygons.find(\n    //   (layer) => layer.feature.properties.name === \"building 7\"\n    // );\n    // building7Layer.addTo(map);\n\n    // // 클릭 이벤트 처리\n    // map.on('click', function (e) {\n    //     const clickedLatLng = e.latlng;\n    //     const clickedBuilding = geojsonFeature.features.find(feature => leafletPip.pointInLayer(clickedLatLng, L.geoJSON(feature).getLayers()[0]));\n\n    //     if (clickedBuilding) {\n    //         const clickedBuildingName = clickedBuilding.properties.name;\n\n    //         if (clickedBuildingName === 'building 7') {\n    //             building7Layer.bindPopup('Building 7').openPopup();\n    //         } else {\n    //             const clickedLayer = buildingPolygons.find(layer => layer.feature.properties.name === clickedBuildingName);\n    //             if (clickedLayer) {\n    //                 clickedLayer.bindPopup(clickedBuildingName).openPopup();\n    //             }\n    //         }\n    //     }\n    // });\n\n    return () => {\n      map.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      height: \"500px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(GeoJSONMap, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = GeoJSONMap;\nexport default GeoJSONMap;\nvar _c;\n$RefreshReg$(_c, \"GeoJSONMap\");","map":{"version":3,"names":["React","useEffect","L","geojsonFeature","leafletPip","jsxDEV","_jsxDEV","GeoJSONMap","_s","map","setView","tileLayer","attribution","addTo","buildingPolygons","geoJSON","onEachFeature","feature","layer","name","properties","bindPopup","push","remove","id","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ga020/OneDrive/Desktop/　　/Building IT Systems/frontend/src/GeoJSONMap.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport geojsonFeature from \"./drawn_shape.json\"; // geojson 파일 경로\r\nimport leafletPip from \"leaflet-pip\";\r\n\r\nconst GeoJSONMap = () => {\r\n  useEffect(() => {\r\n    const map = L.map(\"map\").setView([10.7298, 106.69451], 20);\r\n\r\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n      attribution: \"© OpenStreetMap contributors\",\r\n    }).addTo(map);\r\n\r\n    // L.geoJSON(geojsonFeature, {\r\n    //     onEachFeature: (feature, layer) => {\r\n    //         const name = feature.properties.name;\r\n    //         layer.bindPopup(name);\r\n    //     }\r\n    // }).addTo(map);\r\n\r\n    // 다각형을 저장할 배열 생성\r\n    const buildingPolygons = [];\r\n\r\n    // 각 Feature에 스타일 및 팝업 추가하여 지도에 표시\r\n    L.geoJSON(geojsonFeature, {\r\n      onEachFeature: (feature, layer) => {\r\n        const name = feature.properties.name;\r\n        layer.bindPopup(name);\r\n\r\n        if (name !== \"building 7\") {\r\n          // building 7이 아닌 다른 건물일 경우 배열에 추가\r\n          buildingPolygons.push(layer);\r\n        }\r\n      },\r\n    }).addTo(map);\r\n\r\n    // // building 7 건물 추가\r\n    // const building7Layer = buildingPolygons.find(\r\n    //   (layer) => layer.feature.properties.name === \"building 7\"\r\n    // );\r\n    // building7Layer.addTo(map);\r\n\r\n    // // 클릭 이벤트 처리\r\n    // map.on('click', function (e) {\r\n    //     const clickedLatLng = e.latlng;\r\n    //     const clickedBuilding = geojsonFeature.features.find(feature => leafletPip.pointInLayer(clickedLatLng, L.geoJSON(feature).getLayers()[0]));\r\n    \r\n    //     if (clickedBuilding) {\r\n    //         const clickedBuildingName = clickedBuilding.properties.name;\r\n    \r\n    //         if (clickedBuildingName === 'building 7') {\r\n    //             building7Layer.bindPopup('Building 7').openPopup();\r\n    //         } else {\r\n    //             const clickedLayer = buildingPolygons.find(layer => layer.feature.properties.name === clickedBuildingName);\r\n    //             if (clickedLayer) {\r\n    //                 clickedLayer.bindPopup(clickedBuildingName).openPopup();\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // });\r\n\r\n    return () => {\r\n      map.remove();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"map\" style={{ height: \"500px\" }}>\r\n      {/* 지도를 렌더링할 div 요소 */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeoJSONMap;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B;AACjC,OAAOC,cAAc,MAAM,oBAAoB,CAAC,CAAC;AACjD,OAAOC,UAAU,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvBP,SAAS,CAAC,MAAM;IACd,MAAMQ,GAAG,GAAGP,CAAC,CAACO,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE,EAAE,CAAC;IAE1DR,CAAC,CAACS,SAAS,CAAC,oDAAoD,EAAE;MAChEC,WAAW,EAAE;IACf,CAAC,CAAC,CAACC,KAAK,CAACJ,GAAG,CAAC;;IAEb;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA,MAAMK,gBAAgB,GAAG,EAAE;;IAE3B;IACAZ,CAAC,CAACa,OAAO,CAACZ,cAAc,EAAE;MACxBa,aAAa,EAAEA,CAACC,OAAO,EAAEC,KAAK,KAAK;QACjC,MAAMC,IAAI,GAAGF,OAAO,CAACG,UAAU,CAACD,IAAI;QACpCD,KAAK,CAACG,SAAS,CAACF,IAAI,CAAC;QAErB,IAAIA,IAAI,KAAK,YAAY,EAAE;UACzB;UACAL,gBAAgB,CAACQ,IAAI,CAACJ,KAAK,CAAC;QAC9B;MACF;IACF,CAAC,CAAC,CAACL,KAAK,CAACJ,GAAG,CAAC;;IAEb;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,OAAO,MAAM;MACXA,GAAG,CAACc,MAAM,CAAC,CAAC;IACd,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjB,OAAA;IAAKkB,EAAE,EAAC,KAAK;IAACC,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEpC,CAAC;AAEV,CAAC;AAACtB,EAAA,CAlEID,UAAU;AAAAwB,EAAA,GAAVxB,UAAU;AAoEhB,eAAeA,UAAU;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
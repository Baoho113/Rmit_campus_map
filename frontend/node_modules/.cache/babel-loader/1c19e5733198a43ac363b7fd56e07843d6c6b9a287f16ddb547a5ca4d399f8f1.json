{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ga020\\\\OneDrive\\\\Desktop\\\\\\u3000\\u3000\\\\Building IT Systems\\\\frontend\\\\src\\\\GeoJSONMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./drawn_shape.json\"; // geojson 파일 경로\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeoJSONMap = () => {\n  _s();\n  useEffect(() => {\n    const map = L.map(\"map\").setView([10.7298, 106.69451], 20);\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: \"© OpenStreetMap contributors\"\n    }).addTo(map);\n\n    // L.geoJSON(geojsonFeature, {\n    //     onEachFeature: (feature, layer) => {\n    //         const name = feature.properties.name;\n    //         layer.bindPopup(name);\n    //     }\n    // }).addTo(map);\n\n    // 각 Feature에 스타일을 적용하여 지도에 표시\n    L.geoJSON(geojsonFeature, {\n      style: function (feature) {\n        if (feature.properties.name === \"building 7\") {\n          return {\n            fillColor: \"yellow\",\n            // 노란색\n            color: \"yellow\" // 테두리 색도 동일하게 노란색 설정\n          };\n        } else {\n          return {\n            fillColor: \"blue\",\n            // 파란색\n            color: \"blue\" // 테두리 색도 동일하게 파란색 설정\n          };\n        }\n      },\n      onEachFeature: (feature, layer) => {\n        const name = feature.properties.name;\n        layer.bindPopup(name);\n      }\n    }).addTo(map);\n    return () => {\n      map.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      height: \"500px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(GeoJSONMap, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = GeoJSONMap;\nexport default GeoJSONMap;\nvar _c;\n$RefreshReg$(_c, \"GeoJSONMap\");","map":{"version":3,"names":["React","useEffect","L","geojsonFeature","jsxDEV","_jsxDEV","GeoJSONMap","_s","map","setView","tileLayer","attribution","addTo","geoJSON","style","feature","properties","name","fillColor","color","onEachFeature","layer","bindPopup","remove","id","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ga020/OneDrive/Desktop/　　/Building IT Systems/frontend/src/GeoJSONMap.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport geojsonFeature from \"./drawn_shape.json\"; // geojson 파일 경로\r\n\r\nconst GeoJSONMap = () => {\r\n  useEffect(() => {\r\n    const map = L.map(\"map\").setView([10.7298, 106.69451], 20);\r\n\r\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n      attribution: \"© OpenStreetMap contributors\",\r\n    }).addTo(map);\r\n\r\n    // L.geoJSON(geojsonFeature, {\r\n    //     onEachFeature: (feature, layer) => {\r\n    //         const name = feature.properties.name;\r\n    //         layer.bindPopup(name);\r\n    //     }\r\n    // }).addTo(map);\r\n    \r\n    // 각 Feature에 스타일을 적용하여 지도에 표시\r\n    L.geoJSON(geojsonFeature, {\r\n      style: function (feature) {\r\n        if (feature.properties.name === \"building 7\") {\r\n          return {\r\n            fillColor: \"yellow\", // 노란색\r\n            color: \"yellow\", // 테두리 색도 동일하게 노란색 설정\r\n          };\r\n        } else {\r\n          return {\r\n            fillColor: \"blue\", // 파란색\r\n            color: \"blue\", // 테두리 색도 동일하게 파란색 설정\r\n          };\r\n        }\r\n      },\r\n      onEachFeature: (feature, layer) => {\r\n                const name = feature.properties.name;\r\n                layer.bindPopup(name);\r\n            }\r\n    }).addTo(map);\r\n\r\n    return () => {\r\n      map.remove();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"map\" style={{ height: \"500px\" }}>\r\n      {/* 지도를 렌더링할 div 요소 */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeoJSONMap;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B;AACjC,OAAOC,cAAc,MAAM,oBAAoB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvBN,SAAS,CAAC,MAAM;IACd,MAAMO,GAAG,GAAGN,CAAC,CAACM,GAAG,CAAC,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE,EAAE,CAAC;IAE1DP,CAAC,CAACQ,SAAS,CAAC,oDAAoD,EAAE;MAChEC,WAAW,EAAE;IACf,CAAC,CAAC,CAACC,KAAK,CAACJ,GAAG,CAAC;;IAEb;IACA;IACA;IACA;IACA;IACA;;IAEA;IACAN,CAAC,CAACW,OAAO,CAACV,cAAc,EAAE;MACxBW,KAAK,EAAE,SAAAA,CAAUC,OAAO,EAAE;QACxB,IAAIA,OAAO,CAACC,UAAU,CAACC,IAAI,KAAK,YAAY,EAAE;UAC5C,OAAO;YACLC,SAAS,EAAE,QAAQ;YAAE;YACrBC,KAAK,EAAE,QAAQ,CAAE;UACnB,CAAC;QACH,CAAC,MAAM;UACL,OAAO;YACLD,SAAS,EAAE,MAAM;YAAE;YACnBC,KAAK,EAAE,MAAM,CAAE;UACjB,CAAC;QACH;MACF,CAAC;MACDC,aAAa,EAAEA,CAACL,OAAO,EAAEM,KAAK,KAAK;QACzB,MAAMJ,IAAI,GAAGF,OAAO,CAACC,UAAU,CAACC,IAAI;QACpCI,KAAK,CAACC,SAAS,CAACL,IAAI,CAAC;MACzB;IACR,CAAC,CAAC,CAACL,KAAK,CAACJ,GAAG,CAAC;IAEb,OAAO,MAAM;MACXA,GAAG,CAACe,MAAM,CAAC,CAAC;IACd,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACElB,OAAA;IAAKmB,EAAE,EAAC,KAAK;IAACV,KAAK,EAAE;MAAEW,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEpC,CAAC;AAEV,CAAC;AAACtB,EAAA,CA9CID,UAAU;AAAAwB,EAAA,GAAVxB,UAAU;AAgDhB,eAAeA,UAAU;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
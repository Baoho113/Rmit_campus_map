{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\young\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\Rmit_campus_map\\\\frontend\\\\src\\\\MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport 'leaflet-draw';\nimport axios from 'axios';\nimport GeoJSONMap from './GeoJSONMap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapComponent() {\n  _s();\n  const mapRef = useRef(null);\n  const drawnItems = useRef(null);\n  useEffect(() => {\n    mapRef.current = L.map(\"map\", {\n      center: [0, 0],\n      // 이미지의 중심 좌표 설정\n      zoom: 100,\n      // 이미지가 맵 전체에 꽉 차게 표시되도록 축소 레벨 설정\n      crs: L.CRS.Simple // 이미지 크기를 실제 좌표로 사용하도록 설정\n    });\n\n    // B2L2 이미지를 맵에 추가하고 맵의 크기를 이미지에 맞게 조절합니다.\n    const b2l2ImageBounds = [[-1000, -500],\n    // 이미지의 좌측 상단 좌표 (임의의 음수 값, 이미지를 확대하기 위해)\n    [500, 500] // 이미지의 우측 하단 좌표 (임의의 양수 값, 이미지를 확대하기 위해)\n    ];\n    L.imageOverlay(\"images/B2L2.png\", b2l2ImageBounds).addTo(mapRef.current);\n    mapRef.current.fitBounds(b2l2ImageBounds);\n    return () => {\n      mapRef.current.remove();\n    };\n  }, []);\n  const saveShape = () => {\n    if (drawnItems.current) {\n      const geoJSON = drawnItems.current.toGeoJSON();\n      const stringifiedData = JSON.stringify(geoJSON, null, 2);\n      const blob = new Blob([stringifiedData], {\n        type: 'application/json'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'drawn_shape.geojson';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      // axios.post('/api/save-shape', { shapeData: geoJSON })\n      //   .then(response => {\n      //     console.log(response.data.message);\n      //   })\n      //   .catch(error => {\n      //     console.error('Error saving shape:', error);\n      //   });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: '500px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveShape,\n      children: \"Save Shape\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(MapComponent, \"1Ytz2Uzsxv68ai9tuLcWsLQTlGc=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","L","axios","GeoJSONMap","jsxDEV","_jsxDEV","MapComponent","_s","mapRef","drawnItems","current","map","center","zoom","crs","CRS","Simple","b2l2ImageBounds","imageOverlay","addTo","fitBounds","remove","saveShape","geoJSON","toGeoJSON","stringifiedData","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","children","id","style","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/young/OneDrive/바탕 화면/Rmit_campus_map/frontend/src/MapComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport 'leaflet-draw';\nimport axios from 'axios';\nimport GeoJSONMap from './GeoJSONMap';\n\nfunction MapComponent() {\n  const mapRef = useRef(null);\n  const drawnItems = useRef(null);\n\n  useEffect(() => {\n    mapRef.current = L.map(\"map\", {\n      center: [0, 0],    // 이미지의 중심 좌표 설정\n      zoom: 100,           // 이미지가 맵 전체에 꽉 차게 표시되도록 축소 레벨 설정\n      crs: L.CRS.Simple,  // 이미지 크기를 실제 좌표로 사용하도록 설정\n    });\n\n    // B2L2 이미지를 맵에 추가하고 맵의 크기를 이미지에 맞게 조절합니다.\n    const b2l2ImageBounds = [\n      [-1000, -500],    // 이미지의 좌측 상단 좌표 (임의의 음수 값, 이미지를 확대하기 위해)\n      [500, 500]       // 이미지의 우측 하단 좌표 (임의의 양수 값, 이미지를 확대하기 위해)\n    ];\n\n    L.imageOverlay(\"images/B2L2.png\", b2l2ImageBounds).addTo(mapRef.current);\n    mapRef.current.fitBounds(b2l2ImageBounds);\n\n    return () => {\n      mapRef.current.remove();\n    };\n  }, []);\n\n  const saveShape = () => {\n    if (drawnItems.current) {\n      const geoJSON = drawnItems.current.toGeoJSON();\n      const stringifiedData = JSON.stringify(geoJSON, null, 2);\n\n      const blob = new Blob([stringifiedData], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'drawn_shape.geojson';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      // axios.post('/api/save-shape', { shapeData: geoJSON })\n      //   .then(response => {\n      //     console.log(response.data.message);\n      //   })\n      //   .catch(error => {\n      //     console.error('Error saving shape:', error);\n      //   });\n    }\n  };\n\n  return (\n    <div>\n      <div id=\"map\" style={{ height: '500px' }}></div>\n      <button onClick={saveShape}>Save Shape</button>\n    </div>\n  );\n}\n\nexport default MapComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
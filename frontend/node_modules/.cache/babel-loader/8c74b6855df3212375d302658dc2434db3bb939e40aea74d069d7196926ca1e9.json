{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ga020\\\\OneDrive\\\\Desktop\\\\\\u3000\\u3000\\\\Building IT Systems\\\\frontend\\\\src\\\\MapComponent.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect } from \"react\";\n// import \"leaflet/dist/leaflet.css\";\n// import L from \"leaflet\";\n\n// function MapComponent() {\n//   useEffect(() => {\n//     const mapElement = document.getElementById(\"map\");\n//     if (mapElement && !mapElement._leaflet_id) {\n//       // Check if map is not already initialized\n//       const map = L.map(\"map\").setView([10.7298, 106.69451], 20); // RMIT Vietnam Ho Chi Minh Campus coordinates\n\n//       L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n//         attribution: \"© OpenStreetMap contributors\",\n//       }).addTo(map);\n//     }\n//   }, []);\n\n//   return <div id=\"map\" style={{ height: \"500px\" }}></div>;\n// }\n\n// export default MapComponent;\n\nimport React, { useState, useEffect } from 'react';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport 'leaflet-draw';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MapComponent() {\n  _s();\n  const [map, setMap] = useState(null);\n  useEffect(() => {\n    // Map 생성\n    const newMap = L.map('map').setView([51.505, -0.09], 13);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors'\n    }).addTo(newMap);\n\n    // Leaflet Draw 플러그인 추가\n    const drawnItems = new L.FeatureGroup();\n    newMap.addLayer(drawnItems);\n    const drawControl = new L.Control.Draw({\n      draw: {\n        polygon: true,\n        polyline: false,\n        rectangle: false,\n        circle: false,\n        marker: false\n      },\n      edit: {\n        featureGroup: drawnItems,\n        edit: false,\n        remove: false\n      }\n    });\n    newMap.addControl(drawControl);\n    newMap.on(L.Draw.Event.CREATED, event => {\n      const layer = event.layer;\n      drawnItems.addLayer(layer);\n\n      // 여기서 도형 정보를 서버로 전송할 준비를 할 수 있습니다.\n      const shapeData = layer.toGeoJSON(); // 도형 정보를 GeoJSON 형식으로 얻습니다.\n      sendDataToServer(shapeData); // 서버로 데이터 전송하는 함수 호출\n    });\n    setMap(newMap);\n  }, []);\n\n  // 서버로 데이터 전송하는 함수\n  const sendDataToServer = data => {\n    axios.post('/api/save-shape', data).then(response => {\n      console.log('Shape data sent successfully!', response.data);\n      // 성공적으로 데이터를 서버로 전송한 후 실행할 작업을 여기에 추가할 수 있습니다.\n    }).catch(error => {\n      console.error('Error sending shape data:', error);\n      // 데이터 전송 중 에러가 발생한 경우에 대한 처리를 여기에 추가할 수 있습니다.\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      height: '500px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 10\n  }, this);\n}\n_s(MapComponent, \"4bJBv0PO2rrDzFRchWWuXyIru0A=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useState","useEffect","L","axios","jsxDEV","_jsxDEV","MapComponent","_s","map","setMap","newMap","setView","tileLayer","attribution","addTo","drawnItems","FeatureGroup","addLayer","drawControl","Control","Draw","draw","polygon","polyline","rectangle","circle","marker","edit","featureGroup","remove","addControl","on","Event","CREATED","event","layer","shapeData","toGeoJSON","sendDataToServer","data","post","then","response","console","log","catch","error","id","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ga020/OneDrive/Desktop/　　/Building IT Systems/frontend/src/MapComponent.js"],"sourcesContent":["// import React, { useEffect } from \"react\";\r\n// import \"leaflet/dist/leaflet.css\";\r\n// import L from \"leaflet\";\r\n\r\n// function MapComponent() {\r\n//   useEffect(() => {\r\n//     const mapElement = document.getElementById(\"map\");\r\n//     if (mapElement && !mapElement._leaflet_id) {\r\n//       // Check if map is not already initialized\r\n//       const map = L.map(\"map\").setView([10.7298, 106.69451], 20); // RMIT Vietnam Ho Chi Minh Campus coordinates\r\n\r\n//       L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\r\n//         attribution: \"© OpenStreetMap contributors\",\r\n//       }).addTo(map);\r\n//     }\r\n//   }, []);\r\n\r\n//   return <div id=\"map\" style={{ height: \"500px\" }}></div>;\r\n// }\r\n\r\n// export default MapComponent;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport 'leaflet-draw/dist/leaflet.draw.css';\r\nimport 'leaflet-draw';\r\nimport axios from 'axios';\r\n\r\nfunction MapComponent() {\r\n  const [map, setMap] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Map 생성\r\n    const newMap = L.map('map').setView([51.505, -0.09], 13);\r\n\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: '© OpenStreetMap contributors',\r\n    }).addTo(newMap);\r\n\r\n    // Leaflet Draw 플러그인 추가\r\n    const drawnItems = new L.FeatureGroup();\r\n    newMap.addLayer(drawnItems);\r\n\r\n    const drawControl = new L.Control.Draw({\r\n      draw: {\r\n        polygon: true,\r\n        polyline: false,\r\n        rectangle: false,\r\n        circle: false,\r\n        marker: false,\r\n      },\r\n      edit: {\r\n        featureGroup: drawnItems,\r\n        edit: false,\r\n        remove: false,\r\n      },\r\n    });\r\n    newMap.addControl(drawControl);\r\n\r\n    newMap.on(L.Draw.Event.CREATED, (event) => {\r\n      const layer = event.layer;\r\n      drawnItems.addLayer(layer);\r\n\r\n      // 여기서 도형 정보를 서버로 전송할 준비를 할 수 있습니다.\r\n      const shapeData = layer.toGeoJSON(); // 도형 정보를 GeoJSON 형식으로 얻습니다.\r\n      sendDataToServer(shapeData); // 서버로 데이터 전송하는 함수 호출\r\n    });\r\n\r\n    setMap(newMap);\r\n  }, []);\r\n\r\n  // 서버로 데이터 전송하는 함수\r\n  const sendDataToServer = (data) => {\r\n    axios.post('/api/save-shape', data)\r\n      .then(response => {\r\n        console.log('Shape data sent successfully!', response.data);\r\n        // 성공적으로 데이터를 서버로 전송한 후 실행할 작업을 여기에 추가할 수 있습니다.\r\n      })\r\n      .catch(error => {\r\n        console.error('Error sending shape data:', error);\r\n        // 데이터 전송 중 에러가 발생한 경우에 대한 처리를 여기에 추가할 수 있습니다.\r\n      });\r\n  };\r\n\r\n  return <div id=\"map\" style={{ height: '500px' }}></div>;\r\n}\r\n\r\nexport default MapComponent;"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,0BAA0B;AACjC,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,oCAAoC;AAC3C,OAAO,cAAc;AACrB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,MAAM,GAAGR,CAAC,CAACM,GAAG,CAAC,KAAK,CAAC,CAACG,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;IAExDT,CAAC,CAACU,SAAS,CAAC,oDAAoD,EAAE;MAChEC,WAAW,EAAE;IACf,CAAC,CAAC,CAACC,KAAK,CAACJ,MAAM,CAAC;;IAEhB;IACA,MAAMK,UAAU,GAAG,IAAIb,CAAC,CAACc,YAAY,CAAC,CAAC;IACvCN,MAAM,CAACO,QAAQ,CAACF,UAAU,CAAC;IAE3B,MAAMG,WAAW,GAAG,IAAIhB,CAAC,CAACiB,OAAO,CAACC,IAAI,CAAC;MACrCC,IAAI,EAAE;QACJC,OAAO,EAAE,IAAI;QACbC,QAAQ,EAAE,KAAK;QACfC,SAAS,EAAE,KAAK;QAChBC,MAAM,EAAE,KAAK;QACbC,MAAM,EAAE;MACV,CAAC;MACDC,IAAI,EAAE;QACJC,YAAY,EAAEb,UAAU;QACxBY,IAAI,EAAE,KAAK;QACXE,MAAM,EAAE;MACV;IACF,CAAC,CAAC;IACFnB,MAAM,CAACoB,UAAU,CAACZ,WAAW,CAAC;IAE9BR,MAAM,CAACqB,EAAE,CAAC7B,CAAC,CAACkB,IAAI,CAACY,KAAK,CAACC,OAAO,EAAGC,KAAK,IAAK;MACzC,MAAMC,KAAK,GAAGD,KAAK,CAACC,KAAK;MACzBpB,UAAU,CAACE,QAAQ,CAACkB,KAAK,CAAC;;MAE1B;MACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,SAAS,CAAC,CAAC,CAAC,CAAC;MACrCC,gBAAgB,CAACF,SAAS,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC;IAEF3B,MAAM,CAACC,MAAM,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM4B,gBAAgB,GAAIC,IAAI,IAAK;IACjCpC,KAAK,CAACqC,IAAI,CAAC,iBAAiB,EAAED,IAAI,CAAC,CAChCE,IAAI,CAACC,QAAQ,IAAI;MAChBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,QAAQ,CAACH,IAAI,CAAC;MAC3D;IACF,CAAC,CAAC,CACDM,KAAK,CAACC,KAAK,IAAI;MACdH,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC,CAAC;EACN,CAAC;EAED,oBAAOzC,OAAA;IAAK0C,EAAE,EAAC,KAAK;IAACC,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACzD;AAAC9C,EAAA,CAzDQD,YAAY;AAAAgD,EAAA,GAAZhD,YAAY;AA2DrB,eAAeA,YAAY;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
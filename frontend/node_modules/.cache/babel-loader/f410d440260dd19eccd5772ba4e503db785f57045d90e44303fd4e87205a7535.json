{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\young\\\\Downloads\\\\Rmit_campus_map-joo2\\\\Rmit_campus_map-joo2\\\\frontend\\\\src\\\\GeoJSONMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-polylinedecorator/dist/leaflet.polylineDecorator.js\";\nimport geojsonFeature from \"./building_info/buildingCollection\"; // 기존 geojson 파일 경로\nimport univLayer from \"./univLayer.json\"; // 새로운 geojson 파일 경로\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeoJSONMap = () => {\n  _s();\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n  useEffect(() => {\n    const map = L.map(\"map\", {\n      center: [10.7298, 106.69451],\n      zoom: 20\n    });\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: \"© OpenStreetMap contributors\"\n    }).addTo(map);\n    const univLayerGroup = L.geoJSON(univLayer, {\n      style: {\n        fillColor: \"yellow\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.2\n      },\n      onEachFeature: (feature, layer) => {\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      }\n    });\n    univLayerGroup.addTo(map);\n    const buildingPolygons = [];\n    const layers = L.geoJSON(geojsonFeature, {\n      style: {\n        fillColor: \"blue\",\n        color: \"white\",\n        weight: 1,\n        fillOpacity: 0.5\n      },\n      onEachFeature: (feature, layer) => {\n        layer.bindPopup(feature.properties.name);\n        buildingPolygons.push(layer);\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      }\n    });\n    layers.addTo(map);\n    map.on(\"click\", function (e) {\n      const clickedLatLng = e.latlng;\n      const clickedBuilding = buildingPolygons.find(layer => layer.getBounds().contains(clickedLatLng));\n      if (clickedBuilding) {\n        const clickedBuildingName = clickedBuilding.feature.properties.name;\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n        setSelectedBuilding(null);\n      }\n    });\n\n    // Draw arrows between buildings\n    buildingPolygons.forEach(sourceBuilding => {\n      buildingPolygons.forEach(targetBuilding => {\n        if (sourceBuilding !== targetBuilding) {\n          const sourceLatLng = sourceBuilding.getBounds().getCenter();\n          const targetLatLng = targetBuilding.getBounds().getCenter();\n          const arrow = L.polylineDecorator([[sourceLatLng.lat, sourceLatLng.lng], [targetLatLng.lat, targetLatLng.lng]], {\n            patterns: [{\n              offset: 8,\n              repeat: 16,\n              symbol: L.Symbol.arrowHead({\n                pixelSize: 10,\n                pathOptions: {\n                  fillOpacity: 1,\n                  weight: 0\n                }\n              })\n            }]\n          }).addTo(map);\n        }\n      });\n    });\n    return () => {\n      map.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: \"500px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), selectedBuilding && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedBuilding(null),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedBuilding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `images/${selectedBuilding}.jpg`,\n        alt: selectedBuilding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Description of \", selectedBuilding]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(GeoJSONMap, \"vfcqI9+8M29ENiVuv4axFnKwGUU=\");\n_c = GeoJSONMap;\nexport default GeoJSONMap;\nvar _c;\n$RefreshReg$(_c, \"GeoJSONMap\");","map":{"version":3,"names":["React","useEffect","useState","L","geojsonFeature","univLayer","jsxDEV","_jsxDEV","GeoJSONMap","_s","selectedBuilding","setSelectedBuilding","map","center","zoom","tileLayer","attribution","addTo","univLayerGroup","geoJSON","style","fillColor","color","weight","fillOpacity","onEachFeature","feature","layer","on","clickedBuildingName","properties","name","buildingPolygons","layers","bindPopup","push","e","clickedLatLng","latlng","clickedBuilding","find","getBounds","contains","openPopup","forEach","sourceBuilding","targetBuilding","sourceLatLng","getCenter","targetLatLng","arrow","polylineDecorator","lat","lng","patterns","offset","repeat","symbol","Symbol","arrowHead","pixelSize","pathOptions","remove","children","id","height","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/young/Downloads/Rmit_campus_map-joo2/Rmit_campus_map-joo2/frontend/src/GeoJSONMap.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-polylinedecorator/dist/leaflet.polylineDecorator.js\";\nimport geojsonFeature from \"./building_info/buildingCollection\"; // 기존 geojson 파일 경로\nimport univLayer from \"./univLayer.json\"; // 새로운 geojson 파일 경로\n\nconst GeoJSONMap = () => {\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n\n  useEffect(() => {\n    const map = L.map(\"map\", {\n      center: [10.7298, 106.69451],\n      zoom: 20,\n    });\n\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: \"© OpenStreetMap contributors\",\n    }).addTo(map);\n\n    const univLayerGroup = L.geoJSON(univLayer, {\n      style: {\n        fillColor: \"yellow\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.2,\n      },\n      onEachFeature: (feature, layer) => {\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      },\n    });\n\n    univLayerGroup.addTo(map);\n\n    const buildingPolygons = [];\n    const layers = L.geoJSON(geojsonFeature, {\n      style: {\n        fillColor: \"blue\",\n        color: \"white\",\n        weight: 1,\n        fillOpacity: 0.5,\n      },\n      onEachFeature: (feature, layer) => {\n        layer.bindPopup(feature.properties.name);\n        buildingPolygons.push(layer);\n\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      },\n    });\n\n    layers.addTo(map);\n\n    map.on(\"click\", function (e) {\n      const clickedLatLng = e.latlng;\n      const clickedBuilding = buildingPolygons.find((layer) =>\n        layer.getBounds().contains(clickedLatLng)\n      );\n\n      if (clickedBuilding) {\n        const clickedBuildingName = clickedBuilding.feature.properties.name;\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n        setSelectedBuilding(null);\n      }\n    });\n\n    // Draw arrows between buildings\n    buildingPolygons.forEach((sourceBuilding) => {\n      buildingPolygons.forEach((targetBuilding) => {\n        if (sourceBuilding !== targetBuilding) {\n          const sourceLatLng = sourceBuilding.getBounds().getCenter();\n          const targetLatLng = targetBuilding.getBounds().getCenter();\n          const arrow = L.polylineDecorator([\n            [sourceLatLng.lat, sourceLatLng.lng],\n            [targetLatLng.lat, targetLatLng.lng],\n          ], {\n            patterns: [{\n              offset: 8,\n              repeat: 16,\n              symbol: L.Symbol.arrowHead({\n                pixelSize: 10,\n                pathOptions: { fillOpacity: 1, weight: 0 },\n              }),\n            }],\n          }).addTo(map);\n        }\n      });\n    });\n\n    return () => {\n      map.remove();\n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"map\" style={{ height: \"500px\" }}></div>\n      {selectedBuilding && (\n        <div className=\"navigation-bar\">\n          <button onClick={() => setSelectedBuilding(null)}>X</button>\n          <h2>{selectedBuilding}</h2>\n          <img src={`images/${selectedBuilding}.jpg`} alt={selectedBuilding} />\n          <p>Description of {selectedBuilding}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GeoJSONMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
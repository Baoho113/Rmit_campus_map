{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khang\\\\Rmit_campus_map-1\\\\frontend\\\\src\\\\GeoJSONMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./building_info/buildingCollection\";\nimport univLayer from \"./univLayer.json\";\nimport NavigationBar from \"./NavigationBar\"; // Import the NavigationBar component\nimport jsonRoutes from \"./direction_info/b1_b2.json\"; // 경로 정보가 들어있는 JSON 파일 가져오기\nimport VerticalTab from \"./components/VerticalTab\";\nimport VTlist from \"./components/VTlist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeoJSONMap = selected => {\n  _s();\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n  const mapRef = useRef(); //to store map object\n  const handleDirection = (start, end) => {\n    console.log(\"start point:\", start);\n    console.log(\"end point:\", end);\n    const selectedRoute = jsonRoutes.features.find(route => route.properties.start === start && route.properties.end === end);\n    if (selectedRoute) {\n      const routeCoordinates = selectedRoute.geometry.coordinates;\n      const reversedCoordinates = routeCoordinates.map(coord => coord.reverse());\n      const routePolyline = L.polyline(reversedCoordinates, {\n        color: \"blue\",\n        weight: 3\n      }).addTo(mapRef.current);\n      routePolyline.bringToFront();\n\n      // 맵의 영역을 선이 그려진 영역으로 이동합니다.\n      // const bounds = L.latLngBounds(routeCoordinates.map(coord => L.latLng(coord[1], coord[0])));\n      // mapRef.current.fitBounds(bounds);\n      const bounds = L.latLngBounds(reversedCoordinates.map(coord => L.latLng(coord[1], coord[0])));\n      mapRef.current.fitBounds(routePolyline.getBounds());\n    } else {\n      console.log(\"Cannot find routes\");\n    }\n  };\n  useEffect(() => {\n    // Create a map and store it in the ref\n    mapRef.current = L.map(\"map\", {\n      center: [10.7298, 106.69451],\n      zoom: 20\n    });\n\n    // Add OpenStreetMap tile layer\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: \"© OpenStreetMap contributors\"\n    }).addTo(mapRef.current);\n\n    // Function to handle user's location\n    const handleLocation = location => {\n      const {\n        latitude,\n        longitude\n      } = location.coords;\n      setUserLocation([latitude, longitude]);\n\n      // Add a marker for the user's location\n      const userMarker = L.marker([latitude, longitude], {\n        icon: L.icon({\n          iconUrl: \"/images/person.png\",\n          iconSize: [32, 32],\n          iconAnchor: [16, 32],\n          popupAnchor: [0, -32]\n        })\n      }).addTo(mapRef.current);\n      userMarker.bindPopup(\"Your Location\").openPopup();\n    };\n\n    // Get user's location using Geolocation API\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(handleLocation);\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n    // get user location\n    const getUserLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(handleLocation);\n      } else {\n        console.error(\"Geolocation is not supported by this browser.\");\n      }\n    };\n    // Add university layer\n    const univLayerGroup = L.geoJSON(univLayer, {\n      style: {\n        fillColor: \"yellow\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.2\n      },\n      onEachFeature: (feature, layer) => {\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      }\n    });\n    univLayerGroup.addTo(mapRef.current);\n\n    // Add building polygons\n    const buildingPolygons = [];\n    const layers = L.geoJSON(geojsonFeature, {\n      style: {\n        fillColor: \"blue\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.3\n      },\n      onEachFeature: (feature, layer) => {\n        layer.bindPopup(feature.properties.name);\n        buildingPolygons.push(layer);\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      }\n    });\n    layers.addTo(mapRef.current);\n\n    // Handle click on the map\n    mapRef.current.on(\"click\", function (e) {\n      const clickedLatLng = e.latlng;\n      const clickedBuilding = buildingPolygons.find(layer => layer.getBounds().contains(clickedLatLng));\n      if (clickedBuilding) {\n        const clickedBuildingName = clickedBuilding.features.properties.name;\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n        setSelectedBuilding(null);\n      }\n    });\n    L.geoJson(geojsonFeature, {\n      onEachFeature: function (feature, layer) {\n        var thisLayer = layer;\n        // layer.bindPopup(feature.properties.NAME);\n        var $listItem = $('<li>').html(feature.properties.name).appendTo('#toolbar ul');\n        $listItem.on('click', function () {\n          buildingLayers.clearLayers(); // remove existing markers\n          var thisLat = thisLayer.feature.geometry.coordinates[1];\n          var thisLon = thisLayer.feature.geometry.coordinates[0];\n          mymap.panTo([thisLat, thisLon]);\n          //thisLayer.addTo(mymap);\n          buildingLayers.addLayer(thisLayer);\n          var notifyIcon = L.divIcon({\n            className: 'notify-icon',\n            iconSize: [25, 25],\n            html: '<span></span>'\n          });\n          var notifyMarker = L.marker([thisLat, thisLon], {\n            icon: notifyIcon\n          });\n          buildingLayers.addLayer(notifyMarker);\n\n          // if(mymap.getSize().x < 768){\n          //   $('#toolbar').removeClass('open');\n          // }\n          // thisLayer.on('click', function(){alert(thisLayer.feature.properties.NAME + \" :: \" + thisLayer.feature.properties.BODY);});\n        });\n      }\n    });\n\n    // // Draw arrows between buildings\n    // buildingPolygons.forEach((sourceBuilding) => {\n    //   buildingPolygons.forEach((targetBuilding) => {\n    //     if (sourceBuilding !== targetBuilding) {\n    //       const sourceLatLng = sourceBuilding.getBounds().getCenter();\n    //       const targetLatLng = targetBuilding.getBounds().getCenter();\n\n    //       L.polyline([sourceLatLng, targetLatLng], {\n    //         color: \"red\",\n    //       }).addTo(mapRef.current);\n    //     }\n    //   });\n    // });\n\n    return () => {\n      mapRef.current.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"toolbar\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), userLocation && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your Location: \", userLocation[0], \", \", userLocation[1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        display: \"block\",\n        height: 875,\n        marginTop: 76,\n        zIndex: 10\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), selectedBuilding && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-bar\",\n      style: {\n        position: \"absolute\",\n        top: 100,\n        left: 350,\n        padding: 20,\n        color: \"black\",\n        backgroundColor: \"white\",\n        zIndex: 11,\n        border: '1px solid',\n        borderRadius: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedBuilding(null),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedBuilding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `images/selectedBuilding.jpg`,\n        alt: selectedBuilding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Description of \", selectedBuilding]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s(GeoJSONMap, \"tVMtl+fJLZlVIU/z3oHM4wC5P4M=\");\n_c = GeoJSONMap;\nexport default GeoJSONMap;\nvar _c;\n$RefreshReg$(_c, \"GeoJSONMap\");","map":{"version":3,"names":["React","useEffect","useState","useRef","L","geojsonFeature","univLayer","NavigationBar","jsonRoutes","VerticalTab","VTlist","jsxDEV","_jsxDEV","GeoJSONMap","selected","_s","selectedBuilding","setSelectedBuilding","userLocation","setUserLocation","mapRef","handleDirection","start","end","console","log","selectedRoute","features","find","route","properties","routeCoordinates","geometry","coordinates","reversedCoordinates","map","coord","reverse","routePolyline","polyline","color","weight","addTo","current","bringToFront","bounds","latLngBounds","latLng","fitBounds","getBounds","center","zoom","tileLayer","attribution","handleLocation","location","latitude","longitude","coords","userMarker","marker","icon","iconUrl","iconSize","iconAnchor","popupAnchor","bindPopup","openPopup","navigator","geolocation","getCurrentPosition","error","getUserLocation","univLayerGroup","geoJSON","style","fillColor","fillOpacity","onEachFeature","feature","layer","on","clickedBuildingName","name","buildingPolygons","layers","push","e","clickedLatLng","latlng","clickedBuilding","contains","geoJson","thisLayer","$listItem","$","html","appendTo","buildingLayers","clearLayers","thisLat","thisLon","mymap","panTo","addLayer","notifyIcon","divIcon","className","notifyMarker","remove","children","id","fileName","_jsxFileName","lineNumber","columnNumber","display","height","marginTop","zIndex","position","top","left","padding","backgroundColor","border","borderRadius","onClick","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/khang/Rmit_campus_map-1/frontend/src/GeoJSONMap.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport geojsonFeature from \"./building_info/buildingCollection\";\nimport univLayer from \"./univLayer.json\";\nimport NavigationBar from \"./NavigationBar\"; // Import the NavigationBar component\nimport jsonRoutes from \"./direction_info/b1_b2.json\"; // 경로 정보가 들어있는 JSON 파일 가져오기\nimport VerticalTab from \"./components/VerticalTab\";\nimport VTlist from \"./components/VTlist\";\n\nconst GeoJSONMap = (selected) => {\n  const [selectedBuilding, setSelectedBuilding] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n  const mapRef = useRef(); //to store map object\n  const handleDirection = (start, end) => {\n    console.log(\"start point:\", start);\n    console.log(\"end point:\", end);\n    const selectedRoute = jsonRoutes.features.find(\n      (route) =>\n        route.properties.start === start && route.properties.end === end\n    );\n\n    if (selectedRoute) {\n      const routeCoordinates = selectedRoute.geometry.coordinates;\n      const reversedCoordinates = routeCoordinates.map((coord) =>\n        coord.reverse()\n      );\n\n      const routePolyline = L.polyline(reversedCoordinates, {\n        color: \"blue\",\n        weight: 3,\n      }).addTo(mapRef.current);\n      routePolyline.bringToFront();\n\n      // 맵의 영역을 선이 그려진 영역으로 이동합니다.\n      // const bounds = L.latLngBounds(routeCoordinates.map(coord => L.latLng(coord[1], coord[0])));\n      // mapRef.current.fitBounds(bounds);\n      const bounds = L.latLngBounds(\n        reversedCoordinates.map((coord) => L.latLng(coord[1], coord[0]))\n      );\n\n      mapRef.current.fitBounds(routePolyline.getBounds());\n    } else {\n      console.log(\"Cannot find routes\");\n    }\n  };\n  useEffect(() => {\n    // Create a map and store it in the ref\n    mapRef.current = L.map(\"map\", {\n      center: [10.7298, 106.69451],\n      zoom: 20,\n    });\n\n    // Add OpenStreetMap tile layer\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution: \"© OpenStreetMap contributors\",\n    }).addTo(mapRef.current);\n\n    // Function to handle user's location\n    const handleLocation = (location) => {\n      const { latitude, longitude } = location.coords;\n      setUserLocation([latitude, longitude]);\n\n      // Add a marker for the user's location\n      const userMarker = L.marker([latitude, longitude], {\n        icon: L.icon({\n          iconUrl: \"/images/person.png\",\n          iconSize: [32, 32],\n          iconAnchor: [16, 32],\n          popupAnchor: [0, -32],\n        }),\n      }).addTo(mapRef.current);\n\n      userMarker.bindPopup(\"Your Location\").openPopup();\n    };\n\n    // Get user's location using Geolocation API\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(handleLocation);\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n    // get user location\n    const getUserLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(handleLocation);\n      } else {\n        console.error(\"Geolocation is not supported by this browser.\");\n      }\n    };\n    // Add university layer\n    const univLayerGroup = L.geoJSON(univLayer, {\n      style: {\n        fillColor: \"yellow\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.2,\n      },\n      onEachFeature: (feature, layer) => {\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      },\n    });\n\n    univLayerGroup.addTo(mapRef.current);\n\n    // Add building polygons\n    const buildingPolygons = [];\n    const layers = L.geoJSON(geojsonFeature, {\n      style: {\n        fillColor: \"blue\",\n        color: \"black\",\n        weight: 1,\n        fillOpacity: 0.3,\n      },\n      onEachFeature: (feature, layer) => {\n        layer.bindPopup(feature.properties.name);\n        buildingPolygons.push(layer);\n        layer.on(\"click\", () => {\n          const clickedBuildingName = feature.properties.name;\n          setSelectedBuilding(clickedBuildingName);\n        });\n      },\n    });\n\n    layers.addTo(mapRef.current);\n\n    // Handle click on the map\n    mapRef.current.on(\"click\", function (e) {\n      const clickedLatLng = e.latlng;\n      const clickedBuilding = buildingPolygons.find((layer) =>\n        layer.getBounds().contains(clickedLatLng)\n      );\n\n      if (clickedBuilding) {\n        const clickedBuildingName = clickedBuilding.features.properties.name;\n        clickedBuilding.bindPopup(clickedBuildingName).openPopup();\n        setSelectedBuilding(null);\n      }\n    });\n\n    L.geoJson(geojsonFeature, {\n      onEachFeature: function(feature, layer) {\n        var thisLayer = layer;\n        // layer.bindPopup(feature.properties.NAME);\n        var $listItem = $('<li>').html(feature.properties.name).appendTo('#toolbar ul');\n        $listItem.on('click', function(){\n          buildingLayers.clearLayers(); // remove existing markers\n          var thisLat = thisLayer.feature.geometry.coordinates[1];\n          var thisLon = thisLayer.feature.geometry.coordinates[0];\n          mymap.panTo([thisLat,thisLon]);\n          //thisLayer.addTo(mymap);\n          buildingLayers.addLayer(thisLayer);\n          var notifyIcon = L.divIcon({\n            className: 'notify-icon',\n            iconSize: [25, 25],\n            html: '<span></span>'\n          });\n          var notifyMarker = L.marker([thisLat,thisLon], {icon: notifyIcon});\n          buildingLayers.addLayer(notifyMarker);\n          \n          // if(mymap.getSize().x < 768){\n          //   $('#toolbar').removeClass('open');\n          // }\n          // thisLayer.on('click', function(){alert(thisLayer.feature.properties.NAME + \" :: \" + thisLayer.feature.properties.BODY);});\n        });\n      }\n    });\n\n\n    // // Draw arrows between buildings\n    // buildingPolygons.forEach((sourceBuilding) => {\n    //   buildingPolygons.forEach((targetBuilding) => {\n    //     if (sourceBuilding !== targetBuilding) {\n    //       const sourceLatLng = sourceBuilding.getBounds().getCenter();\n    //       const targetLatLng = targetBuilding.getBounds().getCenter();\n\n    //       L.polyline([sourceLatLng, targetLatLng], {\n    //         color: \"red\",\n    //       }).addTo(mapRef.current);\n    //     }\n    //   });\n    // });\n\n    return () => {\n      mapRef.current.remove();\n    };\n  }, []);\n\n  return (\n    <div>\n      {/* <VerticalTab data={geojsonFeature.features} /> */}\n      {/* <NavigationBar handleDirection={handleDirection} /> */}\n      {/* Render the NavigationBar */}\n      <div id=\"toolbar\">\n        <ul>\n        </ul>\n      </div>\n      {userLocation && (\n        <div className=\"navigation-bar\" >\n          <p>\n            Your Location: {userLocation[0]}, {userLocation[1]}\n          </p>\n        </div>\n      )}\n      <div id=\"map\" style={{ display: \"block\", height: 875, marginTop: 76, zIndex: 10 }}></div>\n      {selectedBuilding && (\n        <div className=\"navigation-bar\" style={{position: \"absolute\", top: 100, left: 350, padding: 20, color: \"black\", backgroundColor: \"white\", zIndex: 11, border: '1px solid', borderRadius: 20 }}>\n          <button onClick={() => setSelectedBuilding(null)}>X</button>\n          <h2>{selectedBuilding}</h2>\n          <img src={`images/selectedBuilding.jpg`} alt={selectedBuilding} />\n          <p>Description of {selectedBuilding}</p>\n        </div>\n      )}\n      \n    </div>\n  );\n};\n\nexport default GeoJSONMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}